/*
 *     The Xilinx Vitis AI Vaip in this distribution are provided under the
 * following free and permissive binary-only license, but are not provided in
 * source code form.  While the following free and permissive license is similar
 * to the BSD open source license, it is NOT the BSD open source license nor
 * other OSI-approved open source license.
 *
 *      Copyright (C) 2022 Xilinx, Inc.
 *      Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
 *
 *      Redistribution and use in binary form only, without modification, is
 * permitted provided that the following conditions are met:
 *
 *      1. Redistributions must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *
 *      2. The name of Xilinx, Inc. may not be used to endorse or promote
 * products redistributed with this software without specific prior written
 * permission.
 *
 *      THIS SOFTWARE IS PROVIDED BY XILINX, INC. "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL XILINX, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 */
syntax = "proto3";
package vaip_core;
message DataOperator{
  bool is_pad = 1;
  repeated int64 padding = 2;
  bool is_layout_transform = 3;
  repeated int64 order = 4;
  bool fix2float = 5;
  bool float2fix = 6;
  int32 fix_point = 7;
  bool quantize_linear = 8;
  bool dequantize_linear = 9;
  float scale = 10;
  int64 zero_point = 11;
}

enum TensorBufferType{
  UNKNOWN = 0;
  ONNX_INPUT = 1;
  ONNX_OUTPUT = 2;
  XIR_INPUT = 3;
  XIR_OUTPUT = 4;
}
message  TensorBufferParam{
  TensorBufferType tb_type = 1;
  string tensor_name = 2; // node_arg_name / xir_tensor_name
  int32 onnx_index = 3;
  repeated int64 onnx_shape = 4;

}
message MetaSchedule{
  TensorBufferParam from_tb_param = 1 ;
  TensorBufferParam to_tb_param = 2;
  DataOperator op = 3;
}

message DpuParam{
  string compiled_xmodel = 1;
  string subgraph_name = 2;
  repeated MetaSchedule input_schedule = 3;
  repeated MetaSchedule output_schedule = 4;
  string xclbin = 5; // here is fullpath for now , it is a contract between dpu pass and GE. Maybe GE does not care.
  // string cache_dir = 5;
  // string cache_key = 64;
}

message DdParam {
  string xclbin = 1;
}
message StatProto {
  repeated DeviceStatProto device_stat = 1;
  repeated NodeStatProto node_stat = 2;
  repeated ShapeInfoProto shape_info = 3;
  repeated SubgraphInfoProto subgraph_stat = 4;
}

message ShapeInfoProto {
  string name = 1;
  repeated int64 shape = 2;
  bool is_scalar = 3;
  bool is_unknown = 4;
}

message SubgraphInfoProto {
  string device = 1;
  int32  count = 2;
}

message NodeStatProto {
  repeated string output = 1;
  repeated string input = 2;
  string op_domain = 3;
  string op_type = 4;
  string comment = 5;
  string device = 6;
}

message DeviceStatProto {
  string name = 1;
  int32 node_num = 2;
  repeated string supported_op_type = 3;
}

message AsrParamShape {
  repeated int64 shapes = 1;
}

message AsrParam{
  repeated AsrParamShape input_shapes = 1;
  repeated AsrParamShape output_shapes = 2;
  bool output_zero_copy = 3;
}

message ConstInfo {
  uint64 offset = 1;
  uint64 size = 2;
  repeated int64 shape= 3;
  // same as TensorProto_DataType
  int32 type = 4;
}

message VaimlParamShape {
  repeated int64 shapes = 1;
}

message VaimlParam{
  string vaiml_model_path = 1;
  bool ai_analyzer_profiling = 2;
  bool debug = 3;
  string device_name = 4;
  string output_type = 5;
  repeated VaimlParamShape output_shapes = 6;
  repeated VaimlParamShape input_shapes = 7;
  string init_m_values = 8;
  string aie_unsupported_ops_override = 9;
  string custom_ops_repo = 11;
  map<string, ConstInfo> const_data_info = 12;
}


message MetaDefProto {
  string id = 1;
  repeated string inputs = 2;
  repeated string outputs = 3;
  repeated string nodes = 4; // we use the first output node arg name to identify a node.
  repeated string constant_initializers = 5;
  string device = 6; // vaip_custom_op_<device>
  map<string, string> generic_param = 7;
  oneof device_param{
    DpuParam dpu_param = 8;
    AsrParam asr_param = 9;
    DdParam dd_param = 10;
    VaimlParam vaiml_param = 11;
  }
  bool fallback_CPU = 12;
}
