/*
 *     The Xilinx Vitis AI Vaip in this distribution are provided under the
 * following free and permissive binary-only license, but are not provided in
 * source code form.  While the following free and permissive license is similar
 * to the BSD open source license, it is NOT the BSD open source license nor
 * other OSI-approved open source license.
 *
 *      Copyright (C) 2022 Xilinx, Inc.
 *      Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
 *
 *      Redistribution and use in binary form only, without modification, is
 * permitted provided that the following conditions are met:
 *
 *      1. Redistributions must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *
 *      2. The name of Xilinx, Inc. may not be used to endorse or promote
 * products redistributed with this software without specific prior written
 * permission.
 *
 *      THIS SOFTWARE IS PROVIDED BY XILINX, INC. "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL XILINX, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 */

syntax = "proto3";
package vaip_core;
message AnchorPointProto {
  string name = 1;
  string op_type = 2;
  oneof operand {
    string origin_node = 3;
    AnchorPointProto next = 4;
  }
  string pass = 5;
  AnchorPointAttributeProto attribute = 6;
}

message AnchorPointAttributeProto {
  oneof op_attr {
    bytes unknown_attr = 104;
    AnchorPointTransposeOpAttr transpose_attr = 106; //
    AnchorPointPadOpAttr pad_attr = 107; //
    AnchorPointFixAttr fix_attr = 110; //
    AnchorPointQdqAttr qdq_attr = 111; //
  }
}
message AnchorPointTransposeOpAttr{
  repeated int64 order = 1;
}

message AnchorPointPadOpAttr{
  // TODO, add document here.
  repeated int64 paddings = 1;
}

message AnchorPointFixAttr {
  int64 fix_point = 1;
}

message AnchorPointQdqAttr {
  float scale = 1;
  int64 zero_point = 2;
}
