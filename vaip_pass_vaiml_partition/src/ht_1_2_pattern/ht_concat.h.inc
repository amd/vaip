//
//  Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
//  Licensed under the MIT License.
//
/** generated by the following command:
env \
 IGNORE_CONSTANT=1 \
 ENABLE_CONSTNAT_SHARING=0 \
 $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
 -i /decoder/rnn/LSTM_1_output_1_QuantizeLinear_Output \
 -i /decoder/rnn/LSTM_output_1_QuantizeLinear_Output \
 -o h1 \
 -f cloned_graph.onnx\
 -c C:\GT_HT\onnx_pattern_gen_gtht\ht_concat.h.inc
*/
auto input_0 = builder.wildcard(); //  id = 0  node_arg_name = /decoder/rnn/LSTM_output_1_QuantizeLinear_Output
builder.bind("/decoder/rnn/LSTM_output_1_QuantizeLinear_Output",input_0);
auto constant_0 = builder.constant(); //  id = 1  node_arg_name = /decoder/rnn/LSTM_output_1_scale
builder.bind("/decoder/rnn/LSTM_output_1_scale",constant_0);
auto constant_1 = builder.constant(); //  id = 2  node_arg_name = /decoder/rnn/LSTM_output_1_zero_point
builder.bind("/decoder/rnn/LSTM_output_1_zero_point",constant_1);
auto DequantizeLinear_0 = builder.node2("DequantizeLinear",{input_0,constant_0,constant_1}); //  id = 3  node_arg_name = /decoder/rnn/LSTM_output_1_DequantizeLinear_Output
builder.bind("/decoder/rnn/LSTM_output_1_DequantizeLinear_Output",DequantizeLinear_0);
auto input_1 = builder.wildcard(); //  id = 4  node_arg_name = /decoder/rnn/LSTM_1_output_1_QuantizeLinear_Output
builder.bind("/decoder/rnn/LSTM_1_output_1_QuantizeLinear_Output",input_1);
auto constant_2 = builder.constant(); //  id = 5  node_arg_name = /decoder/rnn/LSTM_1_output_0_scale
builder.bind("/decoder/rnn/LSTM_1_output_0_scale",constant_2);
auto constant_3 = builder.constant(); //  id = 6  node_arg_name = /decoder/rnn/LSTM_1_output_1_zero_point
builder.bind("/decoder/rnn/LSTM_1_output_1_zero_point",constant_3);
auto DequantizeLinear_1 = builder.node2("DequantizeLinear",{input_1,constant_2,constant_3}); //  id = 7  node_arg_name = /decoder/rnn/LSTM_1_output_1_DequantizeLinear_Output
builder.bind("/decoder/rnn/LSTM_1_output_1_DequantizeLinear_Output",DequantizeLinear_1);
auto Concat_0 = builder.node2("Concat",{DequantizeLinear_0,DequantizeLinear_1}); //  id = 8  node_arg_name = h1_QuantizeLinear_Input
builder.bind("h1_QuantizeLinear_Input",Concat_0);
auto constant_4 = builder.constant(); //  id = 9  node_arg_name = /decoder/rnn/LSTM_output_1_scale
builder.bind("/decoder/rnn/LSTM_output_1_scale",constant_4);
auto constant_5 = builder.constant(); //  id = 10  node_arg_name = h1_zero_point
builder.bind("h1_zero_point",constant_5);
auto QuantizeLinear_0 = builder.node2("QuantizeLinear",{Concat_0,constant_4,constant_5}); //  id = 11  node_arg_name = h1_QuantizeLinear_Output
builder.bind("h1_QuantizeLinear_Output",QuantizeLinear_0);
auto constant_6 = builder.constant(); //  id = 12  node_arg_name = /decoder/rnn/LSTM_output_1_scale
builder.bind("/decoder/rnn/LSTM_output_1_scale",constant_6);
auto constant_7 = builder.constant(); //  id = 13  node_arg_name = h1_zero_point
builder.bind("h1_zero_point",constant_7);
auto DequantizeLinear_2 = builder.node2("DequantizeLinear",{QuantizeLinear_0,constant_6,constant_7}); //  id = 14  node_arg_name = h1
builder.bind("h1",DequantizeLinear_2);
ret = DequantizeLinear_2;
