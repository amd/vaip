//
//  Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
//  Licensed under the MIT License.
//

/** generated by the following command:
env \
 IGNORE_CONSTANT=1 \
 ENABLE_CONSTNAT_SHARING=0 \
 $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
 -i c0 \
 -o /decoder/rnn/Slice_13_output_0_QuantizeLinear_Output \
 -f C:\temp\zhonnian\vaip\.cache\6809517bbd0a7b44acc31942d410ca3a\cloned_graph.onnx\
 -c onnx_grep_cxx_pattern.h.inc
*/
auto input_0 = builder.wildcard(); //  id = 0  node_arg_name = c0
builder.bind("c0",input_0);
auto constant_0 = builder.constant(); //  id = 1  node_arg_name = /decoder/rnn/Slice_13_output_0_scale
builder.bind("/decoder/rnn/Slice_13_output_0_scale",constant_0);
auto constant_1 = builder.constant(); //  id = 2  node_arg_name = /decoder/rnn/Slice_13_output_0_zero_point
builder.bind("/decoder/rnn/Slice_13_output_0_zero_point",constant_1);
auto QuantizeLinear_0 = builder.node2("QuantizeLinear",{input_0,constant_0,constant_1}); //  id = 3  node_arg_name = c0_q_to_dq
builder.bind("c0_q_to_dq",QuantizeLinear_0);
auto constant_2 = builder.constant(); //  id = 4  node_arg_name = /decoder/rnn/Slice_13_output_0_scale
builder.bind("/decoder/rnn/Slice_13_output_0_scale",constant_2);
auto constant_3 = builder.constant(); //  id = 5  node_arg_name = /decoder/rnn/Slice_13_output_0_zero_point
builder.bind("/decoder/rnn/Slice_13_output_0_zero_point",constant_3);
auto DequantizeLinear_0 = builder.node2("DequantizeLinear",{QuantizeLinear_0,constant_2,constant_3}); //  id = 6  node_arg_name = c0_post_dq
builder.bind("c0_post_dq",DequantizeLinear_0);
auto constant_4 = builder.constant(); //  id = 7  node_arg_name = /decoder/rnn/Constant_output_0
builder.bind("/decoder/rnn/Constant_output_0",constant_4);
auto constant_5 = builder.constant(); //  id = 8  node_arg_name = /decoder/rnn/Constant_38_output_0
builder.bind("/decoder/rnn/Constant_38_output_0",constant_5);
auto constant_6 = builder.constant(); //  id = 9  node_arg_name = /decoder/rnn/Constant_output_0
builder.bind("/decoder/rnn/Constant_output_0",constant_6);
auto Slice_0 = builder.node2("Slice",{DequantizeLinear_0,constant_4,constant_5,constant_6}); //  id = 10  node_arg_name = /decoder/rnn/Slice_13_output_0
builder.bind("/decoder/rnn/Slice_13_output_0",Slice_0);
auto constant_7 = builder.constant(); //  id = 11  node_arg_name = /decoder/rnn/Slice_13_output_0_scale
builder.bind("/decoder/rnn/Slice_13_output_0_scale",constant_7);
auto constant_8 = builder.constant(); //  id = 12  node_arg_name = /decoder/rnn/Slice_13_output_0_zero_point
builder.bind("/decoder/rnn/Slice_13_output_0_zero_point",constant_8);
auto QuantizeLinear_1 = builder.node2("QuantizeLinear",{Slice_0,constant_7,constant_8}); //  id = 13  node_arg_name = /decoder/rnn/Slice_13_output_0_QuantizeLinear_Output
builder.bind("/decoder/rnn/Slice_13_output_0_QuantizeLinear_Output",QuantizeLinear_1);
ret = QuantizeLinear_1;
