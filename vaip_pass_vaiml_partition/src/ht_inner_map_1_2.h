// Copyright (C) 2024 Advanced Micro Devices, Inc. All rights reserved.
// Licensed under the MIT License.

std::map<std::string, std::vector<std::string>> ht_inner_map_1_2 = {
    {"subgraph_0",
     {"decoder_embedding.embed_lnorm.bias_DequantizeLinear",
      "decoder_embedding.embed_lnorm.weight_DequantizeLinear",
      "/decoder_embedding/embed/Gather_output_0_DequantizeLinear",
      "=LayerNormalization->/decoder_embedding/embed_lnorm/Add_1_output_0",
      "/decoder_embedding/embed_lnorm/Add_1_output_0_QuantizeLinear",
      "/decoder_embedding/embed_lnorm/Add_1_output_0_DequantizeLinear",
      "/decoder_embedding/sigmoid/Sigmoid",
      "/decoder_embedding/sigmoid/Sigmoid_output_0_QuantizeLinear",
      "/decoder_embedding/sigmoid/Sigmoid_output_0_DequantizeLinear",
      "/decoder/rnn/Transpose",
      "/decoder/rnn/Transpose_output_0_QuantizeLinear",
      "/decoder/rnn/Unsqueeze_1_output_0_DequantizeLinear",
      "/decoder/rnn/Unsqueeze_2_output_0_DequantizeLinear",
      "/decoder/rnn/Unsqueeze_output_0_DequantizeLinear",
      "/decoder/rnn/Slice_13_output_0_DequantizeLinear",
      "/decoder/rnn/Slice_12_output_0_DequantizeLinear",
      "/decoder/rnn/Transpose_output_0_DequantizeLinear",
      "/decoder/rnn/Slice_26_output_0_DequantizeLinear",
      "/decoder/rnn/Slice_27_output_0_DequantizeLinear",
      "/decoder/rnn/LSTM",
      "/decoder/rnn/LSTM_output_0_QuantizeLinear",
      "/decoder/rnn/LSTM_output_0_DequantizeLinear",
      "/decoder/rnn/LSTM_output_2_QuantizeLinear",
      "/decoder/rnn/Squeeze",
      "/decoder/rnn/Unsqueeze_3_output_0_DequantizeLinear",
      "/decoder/rnn/Unsqueeze_4_output_0_DequantizeLinear",
      "/decoder/rnn/Unsqueeze_5_output_0_DequantizeLinear",
      "/decoder/rnn/Squeeze_output_0_QuantizeLinear",
      "/decoder/rnn/Squeeze_output_0_DequantizeLinear",
      "/decoder/rnn/LSTM_1",
      "/decoder/rnn/LSTM_1_output_2_QuantizeLinear",
      "/decoder/rnn/LSTM_output_1_QuantizeLinear",
      "/decoder/rnn/LSTM_1_output_1_QuantizeLinear",
      "/decoder/rnn/LSTM_1_output_0_QuantizeLinear",
      "/decoder/rnn/LSTM_1_output_0_DequantizeLinear",
      "/decoder/rnn/Squeeze_1",
      "/decoder/rnn/Squeeze_1_output_0_QuantizeLinear",
      "/decoder/rnn/Squeeze_1_output_0_DequantizeLinear",
      "/decoder/rnn/Transpose_1",
      "/decoder/rnn/Transpose_1_output_0_QuantizeLinear",
      "/decoder/rnn/Transpose_1_output_0_DequantizeLinear",
      "decoder.lnorm_layer.bias_DequantizeLinear",
      "decoder.lnorm_layer.weight_DequantizeLinear",
      "=LayerNormalization->/decoder/lnorm_layer/Add_1_output_0",
      "/decoder/lnorm_layer/Add_1_output_0_QuantizeLinear",
      "/decoder/lnorm_layer/Add_1_output_0_DequantizeLinear",
      "/lin_dec/fc/Transpose_output_0_DequantizeLinear",
      "/lin_dec/fc/MatMul",
      "/lin_dec/fc/MatMul_output_0_QuantizeLinear",
      "/lin_dec/fc/MatMul_output_0_DequantizeLinear",
      "joint_network.lin_dec.fc.bias_DequantizeLinear",
      "/lin_dec/fc/Add",
      "/lin_dec/fc/Add_output_0_QuantizeLinear",
      "/lin_dec/fc/Add_output_0_DequantizeLinear",
      "joint_network.lin_dec.Lnorm.weight_DequantizeLinear",
      "joint_network.lin_dec.Lnorm.bias_DequantizeLinear",
      "=LayerNormalization->hidden_QuantizeLinear_Input",
      "hidden_QuantizeLinear"}},
    {"subgraph_1",
     {"h0_QuantizeLinear", "h0_DequantizeLinear",
      "h0_DequantizeLinear/duplicated", "/decoder/rnn/Slice_12",
      "/decoder/rnn/Slice_12_output_0_QuantizeLinear", "/decoder/rnn/Slice_26",
      "/decoder/rnn/Slice_26_output_0_QuantizeLinear", "c0_QuantizeLinear",
      "c0_DequantizeLinear", "c0_DequantizeLinear/duplicated",
      "/decoder/rnn/Slice_13", "/decoder/rnn/Slice_13_output_0_QuantizeLinear",
      "/decoder/rnn/Slice_27",
      "/decoder/rnn/Slice_27_output_0_QuantizeLinear"}},
    {"subgraph_2",
     {"/decoder/rnn/LSTM_output_1_DequantizeLinear",
      "/decoder/rnn/LSTM_1_output_1_DequantizeLinear", "/decoder/rnn/Concat_10",
      "h1_QuantizeLinear", "h1_DequantizeLinear",
      "/decoder/rnn/LSTM_output_2_DequantizeLinear",
      "/decoder/rnn/LSTM_1_output_2_DequantizeLinear", "/decoder/rnn/Concat_11",
      "c1_QuantizeLinear", "c1_DequantizeLinear"}}};
