//
//  Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
//  Licensed under the MIT License.
//

/** generated by the following command:
env \
 IGNORE_CONSTANT=1 \
 ENABLE_CONSTNAT_SHARING=0 \
 $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
 -i cache_frames_QuantizeLinear_Output \
 -o oup_cache_frames \
 -o /encoder_embedding/Sub_output_0 \
 -f C:\TEMP\zhonnian\vaip\.cache\97bcaa432a2c634a707dfc23bf222032\cloned_graph.onnx\
 -c onnx_grep_cxx_pattern.h.inc
*/
auto constant_0 = builder.constant(); //  id = 0  node_arg_name = encoder_embedding.global_mean_quantized
builder.bind("encoder_embedding.global_mean_quantized",constant_0);
auto constant_1 = builder.constant(); //  id = 1  node_arg_name = encoder_embedding.global_mean_scale
builder.bind("encoder_embedding.global_mean_scale",constant_1);
auto constant_2 = builder.constant(); //  id = 2  node_arg_name = encoder_embedding.global_mean_zero_point
builder.bind("encoder_embedding.global_mean_zero_point",constant_2);
auto com_microsoft_DequantizeLinear_0 = builder.node2("com.microsoft:DequantizeLinear",{constant_0,constant_1,constant_2}); //  id = 3  node_arg_name = encoder_embedding.global_mean_DequantizeLinear_Output
builder.bind("encoder_embedding.global_mean_DequantizeLinear_Output",com_microsoft_DequantizeLinear_0);
auto input_0 = builder.wildcard(); //  id = 4  node_arg_name = cache_frames_QuantizeLinear_Output
builder.bind("cache_frames_QuantizeLinear_Output",input_0);
auto constant_3 = builder.constant(); //  id = 5  node_arg_name = cache_frames_scale
builder.bind("cache_frames_scale",constant_3);
auto constant_4 = builder.constant(); //  id = 6  node_arg_name = cache_frames_zero_point
builder.bind("cache_frames_zero_point",constant_4);
auto com_microsoft_DequantizeLinear_1 = builder.node2("com.microsoft:DequantizeLinear",{input_0,constant_3,constant_4}); //  id = 7  node_arg_name = cache_frames_DequantizeLinear_Output/duplicated
builder.bind("cache_frames_DequantizeLinear_Output/duplicated",com_microsoft_DequantizeLinear_1);
auto Sub_0 = builder.node2("Sub",{com_microsoft_DequantizeLinear_1,com_microsoft_DequantizeLinear_0}); //  id = 8  node_arg_name = /encoder_embedding/Sub_output_0
builder.bind("/encoder_embedding/Sub_output_0",Sub_0);
auto constant_5 = builder.constant(); //  id = 9  node_arg_name = cache_frames_scale
builder.bind("cache_frames_scale",constant_5);
auto constant_6 = builder.constant(); //  id = 10  node_arg_name = cache_frames_zero_point
builder.bind("cache_frames_zero_point",constant_6);
auto com_microsoft_DequantizeLinear_2 = builder.node2("com.microsoft:DequantizeLinear",{input_0,constant_5,constant_6}); //  id = 11  node_arg_name = cache_frames_DequantizeLinear_Output
builder.bind("cache_frames_DequantizeLinear_Output",com_microsoft_DequantizeLinear_2);
auto constant_7 = builder.constant(); //  id = 12  node_arg_name = /Constant_662_output_0
builder.bind("/Constant_662_output_0",constant_7);
auto constant_8 = builder.constant(); //  id = 13  node_arg_name = /Constant_30_output_0
builder.bind("/Constant_30_output_0",constant_8);
auto constant_9 = builder.constant(); //  id = 14  node_arg_name = /Constant_21_output_0
builder.bind("/Constant_21_output_0",constant_9);
auto constant_10 = builder.constant(); //  id = 15  node_arg_name = /Constant_22_output_0
builder.bind("/Constant_22_output_0",constant_10);
auto Slice_0 = builder.node2("Slice",{com_microsoft_DequantizeLinear_2,constant_7,constant_8,constant_9,constant_10}); //  id = 16  node_arg_name = oup_cache_frames_QuantizeLinear_Input
builder.bind("oup_cache_frames_QuantizeLinear_Input",Slice_0);
auto constant_11 = builder.constant(); //  id = 17  node_arg_name = oup_cache_frames_scale
builder.bind("oup_cache_frames_scale",constant_11);
auto constant_12 = builder.constant(); //  id = 18  node_arg_name = oup_cache_frames_zero_point
builder.bind("oup_cache_frames_zero_point",constant_12);
auto com_microsoft_QuantizeLinear_0 = builder.node2("com.microsoft:QuantizeLinear",{Slice_0,constant_11,constant_12}); //  id = 19  node_arg_name = oup_cache_frames_QuantizeLinear_Output
builder.bind("oup_cache_frames_QuantizeLinear_Output",com_microsoft_QuantizeLinear_0);
auto constant_13 = builder.constant(); //  id = 20  node_arg_name = oup_cache_frames_scale
builder.bind("oup_cache_frames_scale",constant_13);
auto constant_14 = builder.constant(); //  id = 21  node_arg_name = oup_cache_frames_zero_point
builder.bind("oup_cache_frames_zero_point",constant_14);
auto com_microsoft_DequantizeLinear_3 = builder.node2("com.microsoft:DequantizeLinear",{com_microsoft_QuantizeLinear_0,constant_13,constant_14}); //  id = 22  node_arg_name = oup_cache_frames
builder.bind("oup_cache_frames",com_microsoft_DequantizeLinear_3);
ret = builder.sequence(std::vector<std::shared_ptr<vaip_core::Pattern>>{com_microsoft_DequantizeLinear_3,Sub_0,});