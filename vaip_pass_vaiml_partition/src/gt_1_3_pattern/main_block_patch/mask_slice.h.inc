//
//  Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
//  Licensed under the MIT License.
//

/** generated by the following command:
env \
 IGNORE_CONSTANT=1 \
 ENABLE_CONSTNAT_SHARING=0 \
 $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
 -i mask \
 -i /Add_output_0_DequantizeLinear_Output \
 -o /Mul_3_output_0 \
 -f C:\temp\zhonnian\vaip\.cache\97bcaa432a2c634a707dfc23bf222032\cloned_graph.onnx\
 -c onnx_grep_cxx_pattern.h.inc
*/
auto input_0 = builder.wildcard(); //  id = 0  node_arg_name = mask
builder.bind("mask",input_0);
auto constant_0 = builder.constant(); //  id = 1  node_arg_name = /Softmax_13_output_0_scale
builder.bind("/Softmax_13_output_0_scale",constant_0);
auto constant_1 = builder.constant(); //  id = 2  node_arg_name = mask_zero_point
builder.bind("mask_zero_point",constant_1);
auto com_microsoft_QuantizeLinear_0 = builder.node2("com.microsoft:QuantizeLinear",{input_0,constant_0,constant_1}); //  id = 3  node_arg_name = mask_QuantizeLinear_Output
builder.bind("mask_QuantizeLinear_Output",com_microsoft_QuantizeLinear_0);
auto constant_2 = builder.constant(); //  id = 4  node_arg_name = /Softmax_13_output_0_scale
builder.bind("/Softmax_13_output_0_scale",constant_2);
auto constant_3 = builder.constant(); //  id = 5  node_arg_name = mask_zero_point
builder.bind("mask_zero_point",constant_3);
auto com_microsoft_DequantizeLinear_0 = builder.node2("com.microsoft:DequantizeLinear",{com_microsoft_QuantizeLinear_0,constant_2,constant_3}); //  id = 6  node_arg_name = mask_DequantizeLinear_Output/duplicated
builder.bind("mask_DequantizeLinear_Output/duplicated",com_microsoft_DequantizeLinear_0);
auto constant_4 = builder.constant(); //  id = 7  node_arg_name = /Div_output_0
builder.bind("/Div_output_0",constant_4);
auto constant_5 = builder.constant(); //  id = 8  node_arg_name = /Mul_2_output_0
builder.bind("/Mul_2_output_0",constant_5);
auto constant_6 = builder.constant(); //  id = 9  node_arg_name = /Constant_20_output_0
builder.bind("/Constant_20_output_0",constant_6);
auto Slice_0 = builder.node2("Slice",{com_microsoft_DequantizeLinear_0,constant_4,constant_5,constant_6}); //  id = 10  node_arg_name = /Slice_1_output_0
builder.bind("/Slice_1_output_0",Slice_0);
auto constant_7 = builder.constant(); //  id = 11  node_arg_name = /Softmax_13_output_0_scale
builder.bind("/Softmax_13_output_0_scale",constant_7);
auto constant_8 = builder.constant(); //  id = 12  node_arg_name = /Slice_1_output_0_zero_point
builder.bind("/Slice_1_output_0_zero_point",constant_8);
auto com_microsoft_QuantizeLinear_1 = builder.node2("com.microsoft:QuantizeLinear",{Slice_0,constant_7,constant_8}); //  id = 13  node_arg_name = /Slice_1_output_0_QuantizeLinear_Output
builder.bind("/Slice_1_output_0_QuantizeLinear_Output",com_microsoft_QuantizeLinear_1);
auto constant_9 = builder.constant(); //  id = 14  node_arg_name = /Softmax_13_output_0_scale
builder.bind("/Softmax_13_output_0_scale",constant_9);
auto constant_10 = builder.constant(); //  id = 15  node_arg_name = /Slice_1_output_0_zero_point
builder.bind("/Slice_1_output_0_zero_point",constant_10);
auto com_microsoft_DequantizeLinear_1 = builder.node2("com.microsoft:DequantizeLinear",{com_microsoft_QuantizeLinear_1,constant_9,constant_10}); //  id = 16  node_arg_name = /Slice_1_output_0_DequantizeLinear_Output
builder.bind("/Slice_1_output_0_DequantizeLinear_Output",com_microsoft_DequantizeLinear_1);
auto input_1 = builder.wildcard(); //  id = 17  node_arg_name = /Add_output_0_DequantizeLinear_Output
builder.bind("/Add_output_0_DequantizeLinear_Output",input_1);
auto Mul_0 = builder.node2("Mul",{input_1,com_microsoft_DequantizeLinear_1}); //  id = 18  node_arg_name = /Mul_3_output_0
builder.bind("/Mul_3_output_0",Mul_0);
ret = Mul_0;
