//
//  Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
//  Licensed under the MIT License.
//

/** generated by the following command:
env \
 IGNORE_CONSTANT=1 \
 ENABLE_CONSTNAT_SHARING=0 \
 $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
 -i /Add_179_output_0_QuantizeLinear_Output \
 -o hidden_state_QuantizeLinear_Output \
 -f C:\TEMP\zhonnian\vaip\.cache\97bcaa432a2c634a707dfc23bf222032\cloned_graph.onnx\
 -c onnx_grep_cxx_pattern.h.inc
*/
auto constant_0 = builder.constant(); //  id = 0  node_arg_name = joint_network.lin_enc.Lnorm.bias_quantized
builder.bind("joint_network.lin_enc.Lnorm.bias_quantized",constant_0);
auto constant_1 = builder.constant(); //  id = 1  node_arg_name = joint_network.lin_enc.Lnorm.bias_quantized_scale
builder.bind("joint_network.lin_enc.Lnorm.bias_quantized_scale",constant_1);
auto constant_2 = builder.constant(); //  id = 2  node_arg_name = encoder.encoders.6.norm2.bias_quantized_zero_point
builder.bind("encoder.encoders.6.norm2.bias_quantized_zero_point",constant_2);
auto com_microsoft_DequantizeLinear_0 = builder.node2("com.microsoft:DequantizeLinear",{constant_0,constant_1,constant_2}); //  id = 3  node_arg_name = joint_network.lin_enc.Lnorm.bias
builder.bind("joint_network.lin_enc.Lnorm.bias",com_microsoft_DequantizeLinear_0);
auto constant_3 = builder.constant(); //  id = 4  node_arg_name = joint_network.lin_enc.Lnorm.weight_quantized
builder.bind("joint_network.lin_enc.Lnorm.weight_quantized",constant_3);
auto constant_4 = builder.constant(); //  id = 5  node_arg_name = joint_network.lin_enc.Lnorm.weight_scale
builder.bind("joint_network.lin_enc.Lnorm.weight_scale",constant_4);
auto constant_5 = builder.constant(); //  id = 6  node_arg_name = joint_network.lin_enc.Lnorm.weight_zero_point
builder.bind("joint_network.lin_enc.Lnorm.weight_zero_point",constant_5);
auto com_microsoft_DequantizeLinear_1 = builder.node2("com.microsoft:DequantizeLinear",{constant_3,constant_4,constant_5}); //  id = 7  node_arg_name = joint_network.lin_enc.Lnorm.weight_DequantizeLinear_Output
builder.bind("joint_network.lin_enc.Lnorm.weight_DequantizeLinear_Output",com_microsoft_DequantizeLinear_1);
auto constant_6 = builder.constant(); //  id = 8  node_arg_name = joint_network.lin_enc.fc.bias_quantized
builder.bind("joint_network.lin_enc.fc.bias_quantized",constant_6);
auto constant_7 = builder.constant(); //  id = 9  node_arg_name = joint_network.lin_enc.fc.bias_scale
builder.bind("joint_network.lin_enc.fc.bias_scale",constant_7);
auto constant_8 = builder.constant(); //  id = 10  node_arg_name = joint_network.lin_enc.fc.bias_zero_point
builder.bind("joint_network.lin_enc.fc.bias_zero_point",constant_8);
auto com_microsoft_DequantizeLinear_2 = builder.node2("com.microsoft:DequantizeLinear",{constant_6,constant_7,constant_8}); //  id = 11  node_arg_name = joint_network.lin_enc.fc.bias_DequantizeLinear_Output
builder.bind("joint_network.lin_enc.fc.bias_DequantizeLinear_Output",com_microsoft_DequantizeLinear_2);
auto constant_9 = builder.constant(); //  id = 12  node_arg_name = /lin_enc/fc/Transpose_output_0_quantized
builder.bind("/lin_enc/fc/Transpose_output_0_quantized",constant_9);
auto constant_10 = builder.constant(); //  id = 13  node_arg_name = /lin_enc/fc/Transpose_output_0_scale
builder.bind("/lin_enc/fc/Transpose_output_0_scale",constant_10);
auto constant_11 = builder.constant(); //  id = 14  node_arg_name = /lin_enc/fc/Transpose_output_0_zero_point
builder.bind("/lin_enc/fc/Transpose_output_0_zero_point",constant_11);
auto com_microsoft_DequantizeLinear_3 = builder.node2("com.microsoft:DequantizeLinear",{constant_9,constant_10,constant_11}); //  id = 15  node_arg_name = /lin_enc/fc/Transpose_output_0_DequantizeLinear_Output
builder.bind("/lin_enc/fc/Transpose_output_0_DequantizeLinear_Output",com_microsoft_DequantizeLinear_3);
auto constant_12 = builder.constant(); //  id = 16  node_arg_name = encoder.after_norm.bias_quantized
builder.bind("encoder.after_norm.bias_quantized",constant_12);
auto constant_13 = builder.constant(); //  id = 17  node_arg_name = encoder.after_norm.bias_quantized_scale
builder.bind("encoder.after_norm.bias_quantized_scale",constant_13);
auto constant_14 = builder.constant(); //  id = 18  node_arg_name = encoder.encoders.6.norm2.bias_quantized_zero_point
builder.bind("encoder.encoders.6.norm2.bias_quantized_zero_point",constant_14);
auto com_microsoft_DequantizeLinear_4 = builder.node2("com.microsoft:DequantizeLinear",{constant_12,constant_13,constant_14}); //  id = 19  node_arg_name = encoder.after_norm.bias
builder.bind("encoder.after_norm.bias",com_microsoft_DequantizeLinear_4);
auto constant_15 = builder.constant(); //  id = 20  node_arg_name = encoder.after_norm.weight_quantized
builder.bind("encoder.after_norm.weight_quantized",constant_15);
auto constant_16 = builder.constant(); //  id = 21  node_arg_name = encoder.after_norm.weight_scale
builder.bind("encoder.after_norm.weight_scale",constant_16);
auto constant_17 = builder.constant(); //  id = 22  node_arg_name = encoder.after_norm.weight_zero_point
builder.bind("encoder.after_norm.weight_zero_point",constant_17);
auto com_microsoft_DequantizeLinear_5 = builder.node2("com.microsoft:DequantizeLinear",{constant_15,constant_16,constant_17}); //  id = 23  node_arg_name = encoder.after_norm.weight_DequantizeLinear_Output
builder.bind("encoder.after_norm.weight_DequantizeLinear_Output",com_microsoft_DequantizeLinear_5);
auto input_0 = builder.wildcard(); //  id = 24  node_arg_name = /Add_179_output_0_QuantizeLinear_Output
builder.bind("/Add_179_output_0_QuantizeLinear_Output",input_0);
auto constant_18 = builder.constant(); //  id = 25  node_arg_name = /Add_179_output_0_scale
builder.bind("/Add_179_output_0_scale",constant_18);
auto constant_19 = builder.constant(); //  id = 26  node_arg_name = /Add_179_output_0_zero_point
builder.bind("/Add_179_output_0_zero_point",constant_19);
auto com_microsoft_DequantizeLinear_6 = builder.node2("com.microsoft:DequantizeLinear",{input_0,constant_18,constant_19}); //  id = 27  node_arg_name = /Add_179_output_0_DequantizeLinear_Output
builder.bind("/Add_179_output_0_DequantizeLinear_Output",com_microsoft_DequantizeLinear_6);
auto LayerNormalization_0 = builder.node2("LayerNormalization",{com_microsoft_DequantizeLinear_6,com_microsoft_DequantizeLinear_5,com_microsoft_DequantizeLinear_4}); //  id = 28  node_arg_name = /after_norm/Add_1_output_0
builder.bind("/after_norm/Add_1_output_0",LayerNormalization_0);
auto constant_20 = builder.constant(); //  id = 29  node_arg_name = /after_norm/Add_1_output_0_scale
builder.bind("/after_norm/Add_1_output_0_scale",constant_20);
auto constant_21 = builder.constant(); //  id = 30  node_arg_name = /after_norm/Add_1_output_0_zero_point
builder.bind("/after_norm/Add_1_output_0_zero_point",constant_21);
auto com_microsoft_QuantizeLinear_0 = builder.node2("com.microsoft:QuantizeLinear",{LayerNormalization_0,constant_20,constant_21}); //  id = 31  node_arg_name = /after_norm/Add_1_output_0_QuantizeLinear_Output
builder.bind("/after_norm/Add_1_output_0_QuantizeLinear_Output",com_microsoft_QuantizeLinear_0);
auto constant_22 = builder.constant(); //  id = 32  node_arg_name = /after_norm/Add_1_output_0_scale
builder.bind("/after_norm/Add_1_output_0_scale",constant_22);
auto constant_23 = builder.constant(); //  id = 33  node_arg_name = /after_norm/Add_1_output_0_zero_point
builder.bind("/after_norm/Add_1_output_0_zero_point",constant_23);
auto com_microsoft_DequantizeLinear_7 = builder.node2("com.microsoft:DequantizeLinear",{com_microsoft_QuantizeLinear_0,constant_22,constant_23}); //  id = 34  node_arg_name = /after_norm/Add_1_output_0_DequantizeLinear_Output
builder.bind("/after_norm/Add_1_output_0_DequantizeLinear_Output",com_microsoft_DequantizeLinear_7);
auto MatMul_0 = builder.node2("MatMul",{com_microsoft_DequantizeLinear_7,com_microsoft_DequantizeLinear_3}); //  id = 35  node_arg_name = /lin_enc/fc/MatMul_output_0
builder.bind("/lin_enc/fc/MatMul_output_0",MatMul_0);
auto constant_24 = builder.constant(); //  id = 36  node_arg_name = /lin_enc/fc/MatMul_output_0_scale
builder.bind("/lin_enc/fc/MatMul_output_0_scale",constant_24);
auto constant_25 = builder.constant(); //  id = 37  node_arg_name = /lin_enc/fc/MatMul_output_0_zero_point
builder.bind("/lin_enc/fc/MatMul_output_0_zero_point",constant_25);
auto com_microsoft_QuantizeLinear_1 = builder.node2("com.microsoft:QuantizeLinear",{MatMul_0,constant_24,constant_25}); //  id = 38  node_arg_name = /lin_enc/fc/MatMul_output_0_QuantizeLinear_Output
builder.bind("/lin_enc/fc/MatMul_output_0_QuantizeLinear_Output",com_microsoft_QuantizeLinear_1);
auto constant_26 = builder.constant(); //  id = 39  node_arg_name = /lin_enc/fc/MatMul_output_0_scale
builder.bind("/lin_enc/fc/MatMul_output_0_scale",constant_26);
auto constant_27 = builder.constant(); //  id = 40  node_arg_name = /lin_enc/fc/MatMul_output_0_zero_point
builder.bind("/lin_enc/fc/MatMul_output_0_zero_point",constant_27);
auto com_microsoft_DequantizeLinear_8 = builder.node2("com.microsoft:DequantizeLinear",{com_microsoft_QuantizeLinear_1,constant_26,constant_27}); //  id = 41  node_arg_name = /lin_enc/fc/MatMul_output_0_DequantizeLinear_Output
builder.bind("/lin_enc/fc/MatMul_output_0_DequantizeLinear_Output",com_microsoft_DequantizeLinear_8);
auto Add_0 = builder.node2("Add",{com_microsoft_DequantizeLinear_2,com_microsoft_DequantizeLinear_8}); //  id = 42  node_arg_name = /lin_enc/fc/Add_output_0
builder.bind("/lin_enc/fc/Add_output_0",Add_0);
auto constant_28 = builder.constant(); //  id = 43  node_arg_name = /lin_enc/fc/Add_output_0_scale
builder.bind("/lin_enc/fc/Add_output_0_scale",constant_28);
auto constant_29 = builder.constant(); //  id = 44  node_arg_name = /lin_enc/fc/Add_output_0_zero_point
builder.bind("/lin_enc/fc/Add_output_0_zero_point",constant_29);
auto com_microsoft_QuantizeLinear_2 = builder.node2("com.microsoft:QuantizeLinear",{Add_0,constant_28,constant_29}); //  id = 45  node_arg_name = /lin_enc/fc/Add_output_0_QuantizeLinear_Output
builder.bind("/lin_enc/fc/Add_output_0_QuantizeLinear_Output",com_microsoft_QuantizeLinear_2);
auto constant_30 = builder.constant(); //  id = 46  node_arg_name = /lin_enc/fc/Add_output_0_scale
builder.bind("/lin_enc/fc/Add_output_0_scale",constant_30);
auto constant_31 = builder.constant(); //  id = 47  node_arg_name = /lin_enc/fc/Add_output_0_zero_point
builder.bind("/lin_enc/fc/Add_output_0_zero_point",constant_31);
auto com_microsoft_DequantizeLinear_9 = builder.node2("com.microsoft:DequantizeLinear",{com_microsoft_QuantizeLinear_2,constant_30,constant_31}); //  id = 48  node_arg_name = /lin_enc/fc/Add_output_0_DequantizeLinear_Output
builder.bind("/lin_enc/fc/Add_output_0_DequantizeLinear_Output",com_microsoft_DequantizeLinear_9);
auto LayerNormalization_1 = builder.node2("LayerNormalization",{com_microsoft_DequantizeLinear_9,com_microsoft_DequantizeLinear_1,com_microsoft_DequantizeLinear_0}); //  id = 49  node_arg_name = hidden_state_QuantizeLinear_Input
builder.bind("hidden_state_QuantizeLinear_Input",LayerNormalization_1);
auto constant_32 = builder.constant(); //  id = 50  node_arg_name = hidden_state_scale
builder.bind("hidden_state_scale",constant_32);
auto constant_33 = builder.constant(); //  id = 51  node_arg_name = hidden_state_zero_point
builder.bind("hidden_state_zero_point",constant_33);
auto com_microsoft_QuantizeLinear_3 = builder.node2("com.microsoft:QuantizeLinear",{LayerNormalization_1,constant_32,constant_33}); //  id = 52  node_arg_name = hidden_state_QuantizeLinear_Output
builder.bind("hidden_state_QuantizeLinear_Output",com_microsoft_QuantizeLinear_3);
ret = com_microsoft_QuantizeLinear_3;
