name: vaim-dev linux build and test

on:
  push:
    branches: [ "vaiml-dev" ]
  pull_request:
    branches: [ "vaiml-dev" ]
  workflow_dispatch:

env:
  WITH_XCOMPILER: "ON"
  WITH_CPURUNNER: "ON"
  VAI_RT_BUILD_DIR: ${{ github.workspace }}/gb
  VAI_RT_WORKSPACE: ${{ github.workspace }}/
  VAI_RT_PREFIX: ${{ github.workspace }}/gi



jobs:
  linux-build-and-test:
    runs-on: [ linux_build_runner ]
    steps:
      - name: Download vaip Repository
        uses: actions/checkout@v2
        with:
          lfs: 'true'
          path: vaip

      - name: Download vai-rt Repository
        uses: actions/checkout@v2
        with:
          repository: VitisAI/vai-rt
          ref: dev
          path: vai-rt

      - name: Compile 
        run: |
          docker run --rm -v /proj/xbuilds:/proj/xbuilds -v /tools:/tools \
          -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} -u z1aiebuild --network=host -e USER=z1aiebuild -e UID=95777 -e GRP=hd \
          -v /home/z1aiebuild/.ssh:/home/z1aiebuild/.ssh  -e GID=10115 --security-opt seccomp=unconfined \
          xcoartifactory.xilinx.com/vitis-ai-docker-dev-local/voe-dev-build:003 /bin/bash -c \
          "export WITH_CPURUNNER=ON VAI_RT_BUILD_DIR=${{ github.workspace }}/gb  VAI_RT_WORKSPACE=${{ github.workspace }}/src_dir  VAI_RT_PREFIX=${{ github.workspace }}/gi && ENABLE_UNIT_TEST=ON && \ 
          source /opt/xilinx/xrt/setup.sh && \
          rm -fr ${{ github.workspace }}/gb ${{ github.workspace }}/src_dir ${{ github.workspace }}/gi ; \
          python vai-rt/main.py --type release --release_file vai-rt/release_file/latest_dev.txt --exclude-project vaip testcases test_onnx_runner && \
          cp -fr ${{ github.workspace }}/vaip ${{ github.workspace }}/src_dir/vaip && \
          python vai-rt/main.py --type release --dev-mode --project vaip --clean && \
          python vai-rt/main.py --type release --release_file vai-rt/release_file/latest_dev.txt --project test_onnx_runner "
      - name: linux run unit tests
        run: |
          docker run --rm -v /proj/xbuilds:/proj/xbuilds -v /tools:/tools \
          -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} -u z1aiebuild --network=host -e USER=z1aiebuild -e UID=95777 -e GRP=hd \
          -v /home/z1aiebuild/.ssh:/home/z1aiebuild/.ssh  -e GID=10115 --security-opt seccomp=unconfined \
          xcoartifactory.xilinx.com/vitis-ai-docker-dev-local/voe-dev-build:003 /bin/bash -c \
          "export VAI_RT_BUILD_DIR=${{ github.workspace }}/gb  VAI_RT_WORKSPACE=${{ github.workspace }}/src_dir  VAI_RT_PREFIX=${{ github.workspace }}/gi  && \ 
          source /opt/xilinx/xrt/setup.sh && \
          export  LD_LIBRARY_PATH=/usr/local/lib:${{ github.workspace }}/gi/lib:/opt/xilinx/xrt/lib && \
          export VAIP_COMPILE_RESERVE_CONST_DATA=1 XLNX_ENABLE_CACHE=0 XLNX_ENABLE_SKIP_FATAL=0 DEBUG_VAIML_PARTITION=2 USE_CPU_RUNNER=1 XLNX_VART_FIRMWARE=4x4.xclbin&& \
          cd ${{ github.workspace }}/src_dir/vaip && \
          mkdir ${{ github.workspace }}/src_dir/bin/ ${{ github.workspace }}/src_dir/models || true && \
          cp vaip/etc/vaip_config.json ${{ github.workspace }}/src_dir/bin/ && \
          cd ${{ github.workspace }}/src_dir/test_onnx_runner/resnet50_python/ && \
          cp ../data/pt_resnet50.onnx  ${{ github.workspace }}/src_dir/models/resnet50_pt.onnx && \
          pip install --force-reinstall  ${{ github.workspace }}/gb/onnxruntime/Release/dist/onnxruntime*.whl  ${{ github.workspace }}/gb/vaip/onnxruntime_vitisai_ep/python/dist/voe*.whl && \
          pip install --force-reinstall numpy==1.26.4 imageio && \
          export PATH=/home/z1aiebuild/.local/bin:$PATH && \
          python test.py > ${{ github.workspace }}/output.txt"
      - name: check log
        shell: python
        run: |
          import os
          found = [line.strip() for line in open("output.txt","r").readlines() if "brain coral 0.99" in line]
          if len(found):
              print(found)
          else:
              print(open("output.txt","r").readlines())
              exit(1)
      - name: clear log
        run: rm ${{ github.workspace }}/output.txt
         
