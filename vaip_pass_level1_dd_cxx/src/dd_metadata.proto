/*
 *     The Xilinx Vitis AI Vaip in this distribution are provided under the
 * following free and permissive binary-only license, but are not provided in
 * source code form.  While the following free and permissive license is similar
 * to the BSD open source license, it is NOT the BSD open source license nor
 * other OSI-approved open source license.
 *
 *      Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights
 * reserved.
 *
 *      Redistribution and use in binary form only, without modification, is
 * permitted provided that the following conditions are met:
 *
 *      1. Redistributions must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *
 *      2. The name of Xilinx, Inc. may not be used to endorse or promote
 * products redistributed with this software without specific prior written
 * permission.
 *
 *      THIS SOFTWARE IS PROVIDED BY XILINX, INC. "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL XILINX, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 */
syntax = "proto3";
package vaip_core;

message DDOPAttrProto {
  string type = 1;
  repeated string value = 2;
}

message DDOPInfoProto {
  string name = 1;
  string type = 2;
  repeated string in_args = 3;
  repeated string const_args = 4;
  repeated string out_args = 5;
  map<string, DDOPAttrProto> attrs = 6;
}

message DDFusedTensorProto {
  int32 buffer_size = 1;
  int32 xrt_arg_id = 2;
  repeated string packed_tensors = 3;
}

message DDTensorInfoProto {
  string packed_buffer_label = 1;
  int32 xrt_arg_id = 2;
  string dtype = 3;
  repeated int32 shape = 4;
  int32 size_in_bytes = 5;
  int32 offset = 6;
  string file_name = 7;
  int32 file_size = 8;
}

message DDMetadataProto {
  uint32 dd_meta_major_version = 1;
  uint32 dd_meta_minor_version = 2;
  repeated DDOPInfoProto op_list = 3;
  map<string, DDFusedTensorProto> fused_tensors = 4;
  map<string, DDTensorInfoProto> tensor_map = 5;
}
