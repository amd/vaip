// Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
// Licensed under the MIT License.
/** generated by the following command:
env \
 IGNORE_CONSTANT=1 \
 ENABLE_CONSTNAT_SHARING=0 \
 $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
 -i 138 \
 -o 158 \
 -o 216 \
 -f C:\Users\chunywan\workspace\vaip\..\test_onnx_runner\data\pt_resnet50.onnx\
 -c onnx_grep_cxx_pattern.h.inc
*/
auto input_0 = builder.wildcard(); //  id = 0  node_arg_name = 138
builder.bind("138",input_0);
auto constant_0 = builder.constant(); //  id = 1  node_arg_name = 139
builder.bind("139",constant_0);
auto constant_1 = builder.constant(); //  id = 2  node_arg_name = 140
builder.bind("140",constant_1);
auto DequantizeLinear_0 = builder.node2("DequantizeLinear",{input_0,constant_0,constant_1}); //  id = 3  node_arg_name = 141
builder.bind("141",DequantizeLinear_0);
auto constant_2 = builder.constant(); //  id = 4  node_arg_name = module_5.weight
builder.bind("module_5.weight",constant_2);
auto constant_3 = builder.constant(); //  id = 5  node_arg_name = 142
builder.bind("142",constant_3);
auto constant_4 = builder.constant(); //  id = 6  node_arg_name = 143
builder.bind("143",constant_4);
auto QuantizeLinear_0 = builder.node2("QuantizeLinear",{constant_2,constant_3,constant_4}); //  id = 7  node_arg_name = 144
builder.bind("144",QuantizeLinear_0);
auto constant_5 = builder.constant(); //  id = 8  node_arg_name = 145
builder.bind("145",constant_5);
auto constant_6 = builder.constant(); //  id = 9  node_arg_name = 146
builder.bind("146",constant_6);
auto DequantizeLinear_1 = builder.node2("DequantizeLinear",{QuantizeLinear_0,constant_5,constant_6}); //  id = 10  node_arg_name = 147
builder.bind("147",DequantizeLinear_1);
auto constant_7 = builder.constant(); //  id = 11  node_arg_name = module_5.bias
builder.bind("module_5.bias",constant_7);
auto constant_8 = builder.constant(); //  id = 12  node_arg_name = 148
builder.bind("148",constant_8);
auto constant_9 = builder.constant(); //  id = 13  node_arg_name = 149
builder.bind("149",constant_9);
auto QuantizeLinear_1 = builder.node2("QuantizeLinear",{constant_7,constant_8,constant_9}); //  id = 14  node_arg_name = 150
builder.bind("150",QuantizeLinear_1);
auto constant_10 = builder.constant(); //  id = 15  node_arg_name = 151
builder.bind("151",constant_10);
auto constant_11 = builder.constant(); //  id = 16  node_arg_name = 152
builder.bind("152",constant_11);
auto DequantizeLinear_2 = builder.node2("DequantizeLinear",{QuantizeLinear_1,constant_10,constant_11}); //  id = 17  node_arg_name = 153
builder.bind("153",DequantizeLinear_2);
auto Conv_0 = builder.node2("Conv",{DequantizeLinear_0,DequantizeLinear_1,DequantizeLinear_2}); //  id = 18  node_arg_name = 154
builder.bind("154",Conv_0);
auto Relu_0 = builder.node2("Relu",{Conv_0}); //  id = 19  node_arg_name = 155
builder.bind("155",Relu_0);
auto constant_12 = builder.constant(); //  id = 20  node_arg_name = 156
builder.bind("156",constant_12);
auto constant_13 = builder.constant(); //  id = 21  node_arg_name = 157
builder.bind("157",constant_13);
auto QuantizeLinear_2 = builder.node2("QuantizeLinear",{Relu_0,constant_12,constant_13}); //  id = 22  node_arg_name = 158
builder.bind("158",QuantizeLinear_2);
auto constant_14 = builder.constant(); //  id = 23  node_arg_name = module_10.weight
builder.bind("module_10.weight",constant_14);
auto constant_15 = builder.constant(); //  id = 24  node_arg_name = 201
builder.bind("201",constant_15);
auto constant_16 = builder.constant(); //  id = 25  node_arg_name = 202
builder.bind("202",constant_16);
auto QuantizeLinear_3 = builder.node2("QuantizeLinear",{constant_14,constant_15,constant_16}); //  id = 26  node_arg_name = 203
builder.bind("203",QuantizeLinear_3);
auto constant_17 = builder.constant(); //  id = 27  node_arg_name = 204
builder.bind("204",constant_17);
auto constant_18 = builder.constant(); //  id = 28  node_arg_name = 205
builder.bind("205",constant_18);
auto DequantizeLinear_3 = builder.node2("DequantizeLinear",{QuantizeLinear_3,constant_17,constant_18}); //  id = 29  node_arg_name = 206
builder.bind("206",DequantizeLinear_3);
auto constant_19 = builder.constant(); //  id = 30  node_arg_name = module_10.bias
builder.bind("module_10.bias",constant_19);
auto constant_20 = builder.constant(); //  id = 31  node_arg_name = 207
builder.bind("207",constant_20);
auto constant_21 = builder.constant(); //  id = 32  node_arg_name = 208
builder.bind("208",constant_21);
auto QuantizeLinear_4 = builder.node2("QuantizeLinear",{constant_19,constant_20,constant_21}); //  id = 33  node_arg_name = 209
builder.bind("209",QuantizeLinear_4);
auto constant_22 = builder.constant(); //  id = 34  node_arg_name = 210
builder.bind("210",constant_22);
auto constant_23 = builder.constant(); //  id = 35  node_arg_name = 211
builder.bind("211",constant_23);
auto DequantizeLinear_4 = builder.node2("DequantizeLinear",{QuantizeLinear_4,constant_22,constant_23}); //  id = 36  node_arg_name = 212
builder.bind("212",DequantizeLinear_4);
auto Conv_1 = builder.node2("Conv",{DequantizeLinear_0,DequantizeLinear_3,DequantizeLinear_4}); //  id = 37  node_arg_name = 213
builder.bind("213",Conv_1);
auto constant_24 = builder.constant(); //  id = 38  node_arg_name = 214
builder.bind("214",constant_24);
auto constant_25 = builder.constant(); //  id = 39  node_arg_name = 215
builder.bind("215",constant_25);
auto QuantizeLinear_5 = builder.node2("QuantizeLinear",{Conv_1,constant_24,constant_25}); //  id = 40  node_arg_name = 216
builder.bind("216",QuantizeLinear_5);
ret = builder.sequence(std::vector<std::shared_ptr<vaip_core::Pattern>>{QuantizeLinear_2,QuantizeLinear_5,});