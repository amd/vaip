#
# The Xilinx Vitis AI Vaip in this distribution are provided under the following
# free and permissive binary-only license, but are not provided in source code
# form.  While the following free and permissive license is similar to the BSD
# open source license, it is NOT the BSD open source license nor other
# OSI-approved open source license.
#
# Copyright (C) 2022 Xilinx, Inc. All rights reserved.
# Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights reserved.
#
# Redistribution and use in binary form only, without modification, is permitted
# provided that the following conditions are met:
#
# 1. Redistributions must reproduce the above copyright notice, this list of
#   conditions and the following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# 1. The name of Xilinx, Inc. may not be used to endorse or promote products
#   redistributed with this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY XILINX, INC. "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL XILINX, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE
#

cmake_minimum_required(VERSION 3.24)
project(
  vaip
  VERSION 1.0.0
  LANGUAGES C CXX)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/deps.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vaip_common.cmake)
option(USE_STATIC_PYTHON "link with static python or not" OFF)
option(BUILD_PYTHON_EXT "build Python extension" ON)
option(ENABLE_UNIT_TEST "enable vaip unit test or not" OFF)
option(ENABLE_PATTERN_ZOO "enable pattern zoo" ON)
option(ENABLE_GRPAH_OPTIMIZATER "enable graph optimizer or not" ON)
option(ENABLE_VITIS_AI_CUSTOM_OP "enable MHA ort custom op or not" ON)
option(PACK_XCLBIN_PATH "The path of all xclbins packed" "")
option(WIN24_BUILD "build for Win24" ON)

if(NOT BUILD_PYTHON_EXT)
  set(USE_STATIC_PYTHON OFF)
endif()

if (NOT WIN32)
add_compile_options(-w -fpermissive -Wno-error)
endif()

include_directories(
  "${CMAKE_SOURCE_DIR}/../include/onnxruntime")
include_directories(
  "${CMAKE_SOURCE_DIR}/../include/onnxruntime/core/session")
include_directories(
  "${CMAKE_SOURCE_DIR}/../onnxruntime/core/providers/vitisai/include/"
)
include_directories(
  "${GSL_SOURCE_DIR}/include"
)

option(WITH_XCOMPILER "include xcompiler or not" OFF)
option(EN_LLM_DOD_OPS "enable llm dod ops or not" ON)
option(EN_VAIML "enable VAIML flow or not" ON)

file(WRITE ${CMAKE_BINARY_DIR}/components.txt "")
add_subdirectory(encryption)
add_subdirectory(vaip)
if(ENABLE_PATTERN_ZOO)
  add_subdirectory(vaip_pattern_zoo)
endif(ENABLE_PATTERN_ZOO)
add_subdirectory(vaip_pass_init)
add_subdirectory(vaip_pass_create_const_op)
add_subdirectory(vaip_pass_denotation)
add_subdirectory(vaip_pass_graph_input_add_transpose)
add_subdirectory(vaip_pass_convert_split_to_xir_op)
add_subdirectory(vaip_pass_to_xir_ops)
add_subdirectory(vaip_pass_const_add_fix)
# add_subdirectory(vaip_pass_fuse_xmodel)
add_subdirectory(vaip_pass_const_fold_transpose)
add_subdirectory(vaip_pass_convert_softmax_to_hard_softmax)
add_subdirectory(vaip_pass_merge_fix)
add_subdirectory(vaip_pass_merge_fix_fix_transpose)
add_subdirectory(vaip_pass_merge_mul)
add_subdirectory(vaip_pass_const_fold_batchnorm_to_scale)
add_subdirectory(vaip_pass_merge_pad)
add_subdirectory(vaip_pass_merge_hard_sigmoid)
add_subdirectory(vaip_pass_graph_output_add_node)
add_subdirectory(vaip_pass_remove_isolated_node)
add_subdirectory(vaip_pass_layout_transform_via_adding_transpose)
if(ENABLE_GRAPH_OPTIMIZATER)
  add_subdirectory(vaip_pass_graph_opt_layout_transform_via_adding_Transpose)
  add_subdirectory(vaip_pass_graph_opt_fuse_Transpose)
endif(ENABLE_GRAPH_OPTIMIZATER)
add_subdirectory(vaip_pass_fuse_transpose)
add_subdirectory(vaip_pass_remove_identity)
add_subdirectory(vaip_pass_merge_add_into_conv_bias)
add_subdirectory(vaip_pass_merge_consecutive_fix)
add_subdirectory(vaip_pass_merge_many_transpose_into_single_transpose)
if(BUILD_PYTHON_EXT)
  add_subdirectory(vaip_pass_py_ext)
endif()
add_subdirectory(vaip_pass_merge_input_transpose)
add_subdirectory(vaip_pass_dynamic_input_batch)
add_subdirectory(vaip_pass_remove_bottom_transpose)
add_subdirectory(vaip_pass_remove_extra_q_dq)
add_subdirectory(vaip_pass_convert_ending_blacklist_ops_to_unknown_op)
add_subdirectory(vaip_pass_convert_instancenorm_to_groupnorm)
add_subdirectory(vaip_pass_convert_MHA)
add_subdirectory(vaip_pass_convert_pad)
add_subdirectory(vaip_pass_level1_dpu)
add_subdirectory(vaip_custom_op_dpu)
add_subdirectory(vaip_custom_op_nms)
add_subdirectory(vaip_custom_op_dqsoftmax)
add_subdirectory(vaip_custom_op_gather)
add_subdirectory(vaip_custom_op_gather_add)
add_subdirectory(vaip_custom_op_qdq_op)
add_subdirectory(vaip_custom_op_identity)
add_subdirectory(vaip_custom_op_dqcastgather)
add_subdirectory(vaip_custom_op_resize_norm)
add_subdirectory(vaip_custom_op_softmax)
add_subdirectory(vaip_custom_op_topk)
add_subdirectory(vaip_custom_op_decode_filter_boxes)
add_subdirectory(vaip_pass_matmul_nbits)
add_subdirectory(vaip_pass_mladf_mlp)

# add_subdirectory(vaip_op_def_qdq)

if(EN_LLM_DOD_OPS)
  if(WIN32)
    add_subdirectory(vaip_pass_level1_dd)
    add_subdirectory(vaip_pass_level1_dd_cxx)
    add_subdirectory(vaip_pass_dd_merge_dqcastgather)
    add_subdirectory(vaip_pass_dd_merge_qeltwise_add)
    add_subdirectory(vaip_pass_dd_merge_qeltwise_div)
    add_subdirectory(vaip_pass_dd_merge_qmhagrpb)
    add_subdirectory(vaip_pass_dd_merge_mzdk5mha)
    add_subdirectory(vaip_pass_dd_merge_qmatmul)
    add_subdirectory(vaip_pass_dd_merge_qmatmul_add)
    add_subdirectory(vaip_pass_dd_merge_qmatmul_add_gelu)
    add_subdirectory(vaip_pass_dd_merge_qlayernorm)
    add_subdirectory(vaip_pass_dd_merge_qlayernorm_2)
    add_subdirectory(vaip_pass_dd_merge_iconv)
    add_subdirectory(vaip_pass_dd_merge_qconcateops)
    add_subdirectory(vaip_pass_dd_merge_dqadd)
    add_subdirectory(vaip_pass_dd_merge_expand)
    add_subdirectory(vaip_pass_dd_merge_qslice)
    add_subdirectory(vaip_pass_dd_merge_qop) # TODO: Add vaip cpu ops under a different macro(not in EN_LLM_DOD_OPS)
    add_subdirectory(vaip_pass_dd_merge_dqop) # TODO: Add vaip cpu ops under a different macro(not in EN_LLM_DOD_OPS)
    add_subdirectory(vaip_pass_dd_merge_identity)
    add_subdirectory(vaip_pass_dd_merge_qconcat)
    add_subdirectory(vaip_pass_dd_merge_qsilu)
    add_subdirectory(vaip_pass_dd_merge_gather)
    add_subdirectory(vaip_pass_dd_merge_dqsoftmax) # TODO: Add vaip cpu ops under a different macro(not in EN_LLM_DOD_OPS)
    add_subdirectory(vaip_pass_dd_merge_reduce_sum) # TODO: Add vaip cpu ops under a different macro(not in EN_LLM_DOD_OPS)
    add_subdirectory(vaip_pass_dd_merge_qgelu)
    add_subdirectory(vaip_pass_dd_merge_qgemmv)
    add_subdirectory(vaip_pass_dd_merge_dps)
    add_subdirectory(vaip_pass_dd_merge_tanh_lpnorm)
    add_subdirectory(vaip_pass_dd_merge_qbroadcastadd)
    add_subdirectory(vaip_pass_dd_merge_ql2norm)
    add_subdirectory(vaip_pass_dd_merge_qsigmoid)
    #add_subdirectory(vaip_custom_op_gemm)
    add_subdirectory(vaip_custom_op_dod)
    #add_subdirectory(vaip_custom_op_gemm_dynamic)
    #add_subdirectory(vaip_custom_op_matmul_integer)
    #add_subdirectory(vaip_custom_op_gmatmul_integer)
    #add_subdirectory(vaip_custom_op_matmul_nbits)
    add_subdirectory(vaip_custom_op_norm_k)
    add_subdirectory(vaip_custom_op_mlp)
    if(ENABLE_VITIS_AI_CUSTOM_OP)
      add_subdirectory(onnxruntime_vitis_ai_custom_ops)
    endif(ENABLE_VITIS_AI_CUSTOM_OP)
    else()
    add_subdirectory(vaip_custom_op_matmul_nbits)
    add_subdirectory(vaip_custom_op_mlp)
    if(ENABLE_VITIS_AI_CUSTOM_OP)
      add_subdirectory(onnxruntime_vitis_ai_custom_ops)
    endif(ENABLE_VITIS_AI_CUSTOM_OP)
  endif(WIN32)
  # add_subdirectory(vaip_pass_gemm_asr) add_subdirectory(vaip_custom_op_asr)
endif(EN_LLM_DOD_OPS)

if(EN_VAIML)
if(WIN32)
    add_subdirectory(vaip_pass_vaiml_partition)
    add_subdirectory(vaip_custom_op_vaiml)
endif(WIN32)
endif(EN_VAIML)

add_subdirectory(vaip_pass_manual_partition)
if(BUILD_PYTHON_EXT)
  add_subdirectory(vaip_pass_quantize_model)
  add_subdirectory(vaip_pass_graph_label_example)
endif()
add_subdirectory(vaip_pass_merge_duplicated_fix)
add_subdirectory(vaip_pass_save_super_layer_node)
option(ENABLE_VAIP_PASS_DD_MERGE_QMHACHANNEL
       "enable vaip_pass_dd_merge_qmhachannel or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QMHACHANNEL)
  add_subdirectory(vaip_pass_dd_merge_qmhachannel)
endif(ENABLE_VAIP_PASS_DD_MERGE_QMHACHANNEL)
option(ENABLE_VAIP_PASS_DD_MERGE_QRESHAPE_TRANSPOSE "enable vaip_pass_dd_merge_qreshape_transpose or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QRESHAPE_TRANSPOSE)
   add_subdirectory(vaip_pass_dd_merge_qreshape_transpose)
endif(ENABLE_VAIP_PASS_DD_MERGE_QRESHAPE_TRANSPOSE)
option(ENABLE_VAIP_PASS_DD_MERGE_QGLOBALAVGPOOL "enable vaip_pass_dd_merge_qglobalavgpool or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QGLOBALAVGPOOL)
   add_subdirectory(vaip_pass_dd_merge_qglobalavgpool)
endif(ENABLE_VAIP_PASS_DD_MERGE_QGLOBALAVGPOOL)
option(ENABLE_VAIP_PASS_DD_MERGE_QSKIPADD "enable vaip_pass_dd_merge_qskipadd or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QSKIPADD)
   add_subdirectory(vaip_pass_dd_merge_qskipadd)
endif(ENABLE_VAIP_PASS_DD_MERGE_QSKIPADD)
option(ENABLE_VAIP_PASS_DD_MERGE_QMHA "enable vaip_pass_dd_merge_qmha or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QMHA)
   add_subdirectory(vaip_pass_dd_merge_qmha)
endif(ENABLE_VAIP_PASS_DD_MERGE_QMHA)
option(ENABLE_VAIP_PASS_DD_MERGE_QMHAWINDOW "enable vaip_pass_dd_merge_qmhawindow or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QMHAWINDOW)
   add_subdirectory(vaip_pass_dd_merge_qmhawindow)
endif(ENABLE_VAIP_PASS_DD_MERGE_QMHAWINDOW)
option(ENABLE_VAIP_PASS_DD_MERGE_QGROUPNORM "enable vaip_pass_dd_merge_qgroupnorm or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QGROUPNORM)
   add_subdirectory(vaip_pass_dd_merge_qgroupnorm)
endif(ENABLE_VAIP_PASS_DD_MERGE_QGROUPNORM)
option(ENABLE_VAIP_PASS_DUPLICATE_DEQUANTIZE "enable vaip_pass_duplicate_dequantize or not " ON)
if(ENABLE_VAIP_PASS_DUPLICATE_DEQUANTIZE)
   add_subdirectory(vaip_pass_duplicate_dequantize)
endif(ENABLE_VAIP_PASS_DUPLICATE_DEQUANTIZE)
option(ENABLE_VAIP_PASS_DD_MERGE_QCONV2MATMUL "enable vaip_pass_dd_merge_qconv2matmul or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QCONV2MATMUL)
   add_subdirectory(vaip_pass_dd_merge_qconv2matmul)
endif(ENABLE_VAIP_PASS_DD_MERGE_QCONV2MATMUL)
option(ENABLE_VAIP_PASS_DD_MERGE_QELWEMUL "enable vaip_pass_dd_merge_qelwemul or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QELWEMUL)
   add_subdirectory(vaip_pass_dd_merge_qelwemul)
endif(ENABLE_VAIP_PASS_DD_MERGE_QELWEMUL)
option(ENABLE_VAIP_PASS_DD_MERGE_DTYPE "enable vaip_pass_dd_merge_dtype or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_DTYPE)
   add_subdirectory(vaip_pass_dd_merge_dtype)
endif(ENABLE_VAIP_PASS_DD_MERGE_DTYPE)
option(ENABLE_VAIP_PASS_DD_MERGE_QSILU "enable vaip_pass_dd_merge_qsilu or not " OFF)
if(ENABLE_VAIP_PASS_DD_MERGE_QSILU)
   add_subdirectory(vaip_pass_dd_merge_qsilu)
endif(ENABLE_VAIP_PASS_DD_MERGE_QSILU)

option(ENABLE_VAIP_PASS_DD_MERGE_QRESIZE "enable vaip_pass_dd_merge_qresize or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QRESIZE)
   add_subdirectory(vaip_pass_dd_merge_qresize)
endif(ENABLE_VAIP_PASS_DD_MERGE_QRESIZE)
option(ENABLE_VAIP_PASS_DD_MERGE_DEQUANT "enable vaip_pass_dd_merge_dequant or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_DEQUANT)
   add_subdirectory(vaip_pass_dd_merge_dequant)
endif(ENABLE_VAIP_PASS_DD_MERGE_DEQUANT)
option(ENABLE_VAIP_PASS_DD_MERGE_QUANT "enable vaip_pass_dd_merge_quant or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QUANT)
   add_subdirectory(vaip_pass_dd_merge_quant)
endif(ENABLE_VAIP_PASS_DD_MERGE_QUANT)
option(ENABLE_VAIP_PASS_DD_MERGE_QGELU "enable vaip_pass_dd_merge_qgelu or not " OFF)
if(ENABLE_VAIP_PASS_DD_MERGE_QGELU)
   add_subdirectory(vaip_pass_dd_merge_qgelu)
endif(ENABLE_VAIP_PASS_DD_MERGE_QGELU)
option(ENABLE_VAIP_PASS_DD_MERGE_QBROADCASTADD "enable vaip_pass_dd_merge_qbroadcastadd or not " OFF)
if(ENABLE_VAIP_PASS_DD_MERGE_QBROADCASTADD)
   add_subdirectory(vaip_pass_dd_merge_qbroadcastadd)
endif(ENABLE_VAIP_PASS_DD_MERGE_QBROADCASTADD)
option(ENABLE_VAIP_PASS_DD_MERGE_MLADFELWMUL "enable vaip_pass_dd_merge_mladfelwmul or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_MLADFELWMUL)
   add_subdirectory(vaip_pass_dd_merge_mladfelwmul)
endif(ENABLE_VAIP_PASS_DD_MERGE_MLADFELWMUL)
option(ENABLE_VAIP_PASS_DD_MERGE_MLADFMATMUL "enable vaip_pass_dd_merge_mladfmatmul or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_MLADFMATMUL)
   add_subdirectory(vaip_pass_dd_merge_mladfmatmul)
endif(ENABLE_VAIP_PASS_DD_MERGE_MLADFMATMUL)
option(ENABLE_VAIP_PASS_DD_MERGE_ATTENTIONPREPRO "enable vaip_pass_dd_merge_attentionprepro or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_ATTENTIONPREPRO)
   add_subdirectory(vaip_pass_dd_merge_attentionprepro)
endif(ENABLE_VAIP_PASS_DD_MERGE_ATTENTIONPREPRO)
option(ENABLE_VAIP_PASS_DD_MERGE_QSOFTMAX "enable vaip_pass_dd_merge_qsoftmax or not " ON)
if(ENABLE_VAIP_PASS_DD_MERGE_QSOFTMAX)
   add_subdirectory(vaip_pass_dd_merge_qsoftmax)
endif(ENABLE_VAIP_PASS_DD_MERGE_QSOFTMAX)
option(ENABLE_VAIP_PASS_NORM_K "enable vaip_pass_norm_k or not " ON)
if(ENABLE_VAIP_PASS_NORM_K)
   add_subdirectory(vaip_pass_norm_k)
endif(ENABLE_VAIP_PASS_NORM_K)
option(ENABLE_VAIP_PASS_DD_MERGE_GATHER "enable vaip_pass_dd_merge_gather or not " OFF)
if(ENABLE_VAIP_PASS_DD_MERGE_GATHER)
   add_subdirectory(vaip_pass_dd_merge_gather)
endif(ENABLE_VAIP_PASS_DD_MERGE_GATHER)
# !!! DO NOT DELETE OR MODIFY THESE TWO LINES THIS LINE USED BY voe.tools.create_pass !!!!
add_subdirectory(onnxruntime_vitisai_ep)

if(ENABLE_UNIT_TEST)
  add_subdirectory(unit-test)
endif(ENABLE_UNIT_TEST)

file(STRINGS ${CMAKE_BINARY_DIR}/components.txt PACKAGE_COMPONENTS)
message(
  "${CMAKE_BINARY_DIR}/components.txt is ${CMAKE_BINARY_DIR}/components.txt ${PACKAGE_COMPONENTS}"
)

# config files.

configure_file(cmake/config.cmake.in
               "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake" @ONLY)
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
              "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
        DESTINATION share/cmake/${PROJECT_NAME})
# package
set(CPACK_PACKAGE_NAME "libvaip")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Vitis Ai Partition")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${PROJECT_SOURCE_DIR}/README.md")
set(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README.md")
# set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/Copyright.txt")
set(CPACK_PACKAGE_VENDOR "Humanity")
set(CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${CMAKE_PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${CMAKE_PROJECT_VERSION_PATCH})
set(CPACK_PACKAGE_CONTACT "devops@amd.com")
set(CPACK_PACKAGING_INSTALL_PREFIX "/usr")

set(CPACK_DEB_COMPONENT_INSTALL ON)
set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS ON)
set(CPACK_DEBIAN_PACKAGE_SECTION "devel")
set(CPACK_DEBIAN_ARCHIVE_TYPE "gnutar")
set(CPACK_DEBIAN_COMPRESSION_TYPE "gzip")
set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
set(CPACK_DEBIAN_PACKAGE_DEPENDS
    "libunilog >= 2.5.0, libxir (>=2.5.0), libtarget-factory (>=2.5.0), libvart (>=2.5.0)"
)
set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
if(DEFINED ENV{BUILD_NUMBER})
  set(CPACK_DEBIAN_PACKAGE_RELEASE "r$ENV{BUILD_NUMBER}")
endif()
if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "arm64")
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
else()
  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
endif()

set(CPACK_RPM_COMPONENT_INSTALL OFF)
set(CPACK_RPM_PACKAGE_LICENSE "Apache")
set(CPACK_RPM_PACKAGE_GROUP "Development/Tools")
set(CPACK_RPM_COMPRESSION_TYPE "xz")
set(CPACK_RPM_PACKAGE_REQUIRES
    "libunilog >= 2.5.0, libxir >= 2.5.0, libtarget-factory >= 2.5.0, libvart >= 2.5.0"
)
set(CPACK_RPM_FILE_NAME RPM-DEFAULT)
if(DEFINED ENV{BUILD_NUMBER})
  set(CPACK_RPM_PACKAGE_RELEASE "r$ENV{BUILD_NUMBER}")
endif()
set(CPACK_RPM_PACKAGE_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR STREQUAL "cortexa72-cortexa53")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "aarch64")
endif()
include(CPack)
