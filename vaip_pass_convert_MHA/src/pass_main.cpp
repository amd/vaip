/*
 *     The Xilinx Vitis AI Vaip in this distribution are provided under the
 * following free and permissive binary-only license, but are not provided in
 * source code form.  While the following free and permissive license is similar
 * to the BSD open source license, it is NOT the BSD open source license nor
 * other OSI-approved open source license.
 *
 *      Copyright (C) 2022 Xilinx, Inc. All rights reserved.
 *      Copyright (C) 2023 â€“ 2024 Advanced Micro Devices, Inc. All rights
 * reserved.
 *
 *      Redistribution and use in binary form only, without modification, is
 * permitted provided that the following conditions are met:
 *
 *      1. Redistributions must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *
 *      2. The name of Xilinx, Inc. may not be used to endorse or promote
 * products redistributed with this software without specific prior written
 * permission.
 *
 *      THIS SOFTWARE IS PROVIDED BY XILINX, INC. "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL XILINX, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 */
#include <glog/logging.h>
#include <iostream>

#include "vaip/vaip.hpp"
#include "vitis/ai/env_config.hpp"

DEF_ENV_PARAM(DEBUG_CONVERT_MHA, "0")

namespace {

using namespace vaip_core;

std::unique_ptr<Rule> create_MHA_tranpose_rule0(IPass* self) {
  auto builder = vaip_core::PatternBuilder();
  /** generated by the following command:
  env \
   IGNORE_CONSTANT=0 \
   ENABLE_CONSTNAT_SHARING=1 \
   $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
   -i /Reshape_6_output_0_QuantizeLinear_Output \
   -i /Reshape_2_output_0_QuantizeLinear_Output \
   -i /Transpose_5_output_0_QuantizeLinear_Output \
   -o /module_bmm_1/MatMul_output_0_QuantizeLinear_Output \
   -f ..\models\pst_opt\onnx.onnx\
   -c onnx_grep_cxx_pattern.h.inc
  */
  auto input_0 =
      builder.wildcard(); //  id = 0  node_arg_name =
                          //  /Transpose_5_output_0_QuantizeLinear_Output
  builder.bind("/Transpose_5_output_0_QuantizeLinear_Output", input_0);
  auto constant_0 =
      builder.constant(); //  id = 1  node_arg_name = /to_k/Add_output_0_scale
  builder.bind("/to_k/Add_output_0_scale", constant_0);
  auto constant_1 =
      builder
          .constant(); //  id = 2  node_arg_name = /to_k/Add_output_0_zero_point
  builder.bind("/to_k/Add_output_0_zero_point", constant_1);
  auto com_microsoft_DequantizeLinear_0 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_0, constant_0,
       constant_1}); //  id = 3  node_arg_name =
                     //  /Transpose_5_output_0_DequantizeLinear_Output
  builder.bind("/Transpose_5_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_0);
  auto input_1 =
      builder.wildcard(); //  id = 4  node_arg_name =
                          //  /Reshape_2_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_2_output_0_QuantizeLinear_Output", input_1);
  auto constant_2 =
      builder.constant(); //  id = 5  node_arg_name = /to_q/Add_output_0_scale
  builder.bind("/to_q/Add_output_0_scale", constant_2);
  auto constant_3 =
      builder
          .constant(); //  id = 6  node_arg_name = /to_q/Add_output_0_zero_point
  builder.bind("/to_q/Add_output_0_zero_point", constant_3);
  auto com_microsoft_DequantizeLinear_1 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_1, constant_2,
       constant_3}); //  id = 7  node_arg_name =
                     //  /Reshape_2_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_2_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_1);
  auto MatMul_0 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_1,
       com_microsoft_DequantizeLinear_0}); //  id = 8  node_arg_name =
                                           //  /module_bmm/MatMul_output_0
  builder.bind("/module_bmm/MatMul_output_0", MatMul_0);
  auto constant_4 = builder.constant();    //  id = 9  node_arg_name =
                                           //  /module_bmm/MatMul_output_0_scale
  builder.bind("/module_bmm/MatMul_output_0_scale", constant_4);
  auto constant_5 =
      builder.constant(); //  id = 10  node_arg_name =
                          //  /module_bmm/MatMul_output_0_zero_point
  builder.bind("/module_bmm/MatMul_output_0_zero_point", constant_5);
  auto com_microsoft_QuantizeLinear_0 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_0, constant_4,
       constant_5}); //  id = 11  node_arg_name =
                     //  /module_bmm/MatMul_output_0_QuantizeLinear_Output
  builder.bind("/module_bmm/MatMul_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_0);
  auto com_microsoft_DequantizeLinear_2 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_0, constant_4,
       constant_5}); //  id = 12  node_arg_name =
                     //  /module_bmm/MatMul_output_0_DequantizeLinear_Output
  builder.bind("/module_bmm/MatMul_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_2);
  auto constant_6 =
      builder
          .constant(); //  id = 13  node_arg_name =
                       //  /module_mul_22/Constant_output_0_QuantizeLinear_Output
  builder.bind("/module_mul_22/Constant_output_0_QuantizeLinear_Output",
               constant_6);
  auto constant_7 =
      builder.constant(); //  id = 14  node_arg_name =
                          //  /module_mul_22/Constant_output_0_scale
  builder.bind("/module_mul_22/Constant_output_0_scale", constant_7);
  auto constant_8 =
      builder.constant(); //  id = 15  node_arg_name =
                          //  /module_mul_22/Constant_output_0_zero_point
  builder.bind("/module_mul_22/Constant_output_0_zero_point", constant_8);
  auto com_microsoft_DequantizeLinear_3 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {constant_6, constant_7,
       constant_8}); //  id = 16  node_arg_name =
                     //  /module_mul_22/Constant_output_0_DequantizeLinear_Output
  builder.bind("/module_mul_22/Constant_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_3);
  auto Mul_0 = builder.node2(
      "Mul",
      {com_microsoft_DequantizeLinear_3,
       com_microsoft_DequantizeLinear_2}); //  id = 17  node_arg_name =
                                           //  /module_mul_22/Mul_output_0
  builder.bind("/module_mul_22/Mul_output_0", Mul_0);
  auto constant_9 =
      builder.constant(); //  id = 18  node_arg_name =
                          //  DoubleQDQRemoved_/module_mul_22/Mul_output_0_scale
  builder.bind("DoubleQDQRemoved_/module_mul_22/Mul_output_0_scale",
               constant_9);
  auto constant_10 =
      builder
          .constant(); //  id = 19  node_arg_name =
                       //  DoubleQDQRemoved_/module_mul_22/Mul_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/module_mul_22/Mul_output_0_zero_point",
               constant_10);
  auto com_microsoft_QuantizeLinear_1 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Mul_0, constant_9,
       constant_10}); //  id = 20  node_arg_name =
                      //  /module_mul_22/Mul_output_0_QuantizeLinear_Output
  builder.bind("/module_mul_22/Mul_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_1);
  auto constant_11 =
      builder.constant(); //  id = 21  node_arg_name =
                          //  DoubleQDQRemoved_/Cast_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/Cast_output_0_zero_point", constant_11);
  auto com_microsoft_DequantizeLinear_4 =
      builder.node2("com.microsoft:DequantizeLinear",
                    {com_microsoft_QuantizeLinear_1, constant_9,
                     constant_11}); //  id = 22  node_arg_name =
                                    //  /Cast_output_0_DequantizeLinear_Output
  builder.bind("/Cast_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_4);
  auto Softmax_0 = builder.node2(
      "Softmax",
      {com_microsoft_DequantizeLinear_4}); //  id = 23  node_arg_name =
                                           //  /module_softmax/Softmax_output_0
  builder.bind("/module_softmax/Softmax_output_0", Softmax_0);
  auto constant_12 =
      builder.constant(); //  id = 24  node_arg_name =
                          //  DoubleQDQRemoved_/Cast_1_output_0_scale
  builder.bind("DoubleQDQRemoved_/Cast_1_output_0_scale", constant_12);
  auto constant_13 =
      builder
          .constant(); //  id = 25  node_arg_name =
                       //  DoubleQDQRemoved_/module_softmax/Softmax_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/module_softmax/Softmax_output_0_zero_point",
               constant_13);
  auto com_microsoft_QuantizeLinear_2 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Softmax_0, constant_12,
       constant_13}); //  id = 26  node_arg_name =
                      //  /module_softmax/Softmax_output_0_QuantizeLinear_Output
  builder.bind("/module_softmax/Softmax_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_2);
  auto constant_14 =
      builder.constant(); //  id = 27  node_arg_name =
                          //  DoubleQDQRemoved_/Cast_1_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/Cast_1_output_0_zero_point", constant_14);
  auto com_microsoft_DequantizeLinear_5 =
      builder.node2("com.microsoft:DequantizeLinear",
                    {com_microsoft_QuantizeLinear_2, constant_12,
                     constant_14}); //  id = 28  node_arg_name =
                                    //  /Cast_1_output_0_DequantizeLinear_Output
  builder.bind("/Cast_1_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_5);
  auto input_2 =
      builder.wildcard(); //  id = 29  node_arg_name =
                          //  /Reshape_6_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_6_output_0_QuantizeLinear_Output", input_2);
  auto constant_15 =
      builder.constant(); //  id = 30  node_arg_name = /to_v/Add_output_0_scale
  builder.bind("/to_v/Add_output_0_scale", constant_15);
  auto constant_16 = builder.constant(); //  id = 31  node_arg_name =
                                         //  /to_v/Add_output_0_zero_point
  builder.bind("/to_v/Add_output_0_zero_point", constant_16);
  auto com_microsoft_DequantizeLinear_6 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_2, constant_15,
       constant_16}); //  id = 32  node_arg_name =
                      //  /Reshape_6_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_6_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_6);
  auto MatMul_1 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_5,
       com_microsoft_DequantizeLinear_6}); //  id = 33  node_arg_name =
                                           //  /module_bmm_1/MatMul_output_0
  builder.bind("/module_bmm_1/MatMul_output_0", MatMul_1);
  auto constant_17 = builder.constant();   //  id = 34  node_arg_name =
                                         //  /module_bmm_1/MatMul_output_0_scale
  builder.bind("/module_bmm_1/MatMul_output_0_scale", constant_17);
  auto constant_18 =
      builder.constant(); //  id = 35  node_arg_name =
                          //  /module_bmm_1/MatMul_output_0_zero_point
  builder.bind("/module_bmm_1/MatMul_output_0_zero_point", constant_18);
  auto com_microsoft_QuantizeLinear_3 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_1, constant_17,
       constant_18}); //  id = 36  node_arg_name =
                      //  /module_bmm_1/MatMul_output_0_QuantizeLinear_Output
  builder.bind("/module_bmm_1/MatMul_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_3);

  return Rule::create_rule(
      com_microsoft_QuantizeLinear_3,
      [=](onnxruntime::Graph* graph, binder_t& binder) -> bool {
        auto Q_dq_input_n = binder[input_1->get_id()];
        auto K_dq_trans_input_n = binder[input_0->get_id()];
        auto V_dq_input_n = binder[input_2->get_id()];
        auto mul_const_dq_n =
            binder[com_microsoft_DequantizeLinear_3->get_id()];
        auto QKV_matmul_n = binder[MatMul_1->get_id()];
        auto QKV_matmul_q_n = binder[com_microsoft_QuantizeLinear_3->get_id()];

        LOG_IF(INFO, ENV_PARAM(DEBUG_CONVERT_MHA))
            << "MHA match for rule-0 tranpose"
            << ", QKV_matmul: " << node_as_string(*QKV_matmul_n.node);

        /// create MHA node
        NodeBuilder(*graph, *self)
            .set_op_type("QMHA")
            .set_input_nodes({Q_dq_input_n.node, K_dq_trans_input_n.node,
                              V_dq_input_n.node, mul_const_dq_n.node})
            .clone_data_type(*QKV_matmul_n.node)
            .set_anchor_point1(*QKV_matmul_q_n.node)
            .build();

        return true;
      });
}

std::unique_ptr<Rule> create_MHA_tranpose_rule1(IPass* self) {
  auto builder = vaip_core::PatternBuilder();

  /** generated by the following command:
  env \
   IGNORE_CONSTANT=0 \
   ENABLE_CONSTNAT_SHARING=1 \
   $BUILD/vaip/onnxruntime_vitisai_ep/onnx_pattern_gen \
   -i /decoder/mid_block/attentions.0/Reshape_6_output_0_QuantizeLinear_Output \
   -i /decoder/mid_block/attentions.0/Reshape_2_output_0_QuantizeLinear_Output \
   -i /decoder/mid_block/attentions.0/Transpose_4_output_0_QuantizeLinear_Output
  \
   -o /decoder/mid_block/attentions.0/MatMul_1_output_0_QuantizeLinear_Output \
   -f ..\models\pss_opt\onnx.onnx\
   -c onnx_grep_cxx_pattern.h.inc
  */
  auto input_0 =
      builder
          .wildcard(); //  id = 0  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Transpose_4_output_0_QuantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Transpose_4_output_0_QuantizeLinear_Output",
               input_0);
  auto constant_0 =
      builder
          .constant(); //  id = 1  node_arg_name =
                       //  /decoder/mid_block/attentions.0/to_k/Add_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/to_k/Add_output_0_scale",
               constant_0);
  auto constant_1 =
      builder
          .constant(); //  id = 2  node_arg_name =
                       //  /decoder/mid_block/attentions.0/to_k/Add_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/to_k/Add_output_0_zero_point",
               constant_1);
  auto com_microsoft_DequantizeLinear_0 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_0, constant_0,
       constant_1}); //  id = 3  node_arg_name =
                     //  /decoder/mid_block/attentions.0/Transpose_4_output_0_DequantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Transpose_4_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_0);
  auto input_1 =
      builder
          .wildcard(); //  id = 4  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Reshape_2_output_0_QuantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Reshape_2_output_0_QuantizeLinear_Output",
               input_1);
  auto constant_2 =
      builder
          .constant(); //  id = 5  node_arg_name =
                       //  /decoder/mid_block/attentions.0/to_q/Add_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/to_q/Add_output_0_scale",
               constant_2);
  auto constant_3 =
      builder
          .constant(); //  id = 6  node_arg_name =
                       //  /decoder/mid_block/attentions.0/to_q/Add_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/to_q/Add_output_0_zero_point",
               constant_3);
  auto com_microsoft_DequantizeLinear_1 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_1, constant_2,
       constant_3}); //  id = 7  node_arg_name =
                     //  /decoder/mid_block/attentions.0/Reshape_2_output_0_DequantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Reshape_2_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_1);
  auto MatMul_0 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_1,
       com_microsoft_DequantizeLinear_0}); //  id = 8  node_arg_name =
                                           //  /decoder/mid_block/attentions.0/MatMul_output_0
  builder.bind("/decoder/mid_block/attentions.0/MatMul_output_0", MatMul_0);
  auto constant_4 =
      builder
          .constant(); //  id = 9  node_arg_name =
                       //  /decoder/mid_block/attentions.0/MatMul_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/MatMul_output_0_scale",
               constant_4);
  auto constant_5 =
      builder
          .constant(); //  id = 10  node_arg_name =
                       //  /decoder/mid_block/attentions.0/MatMul_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/MatMul_output_0_zero_point",
               constant_5);
  auto com_microsoft_QuantizeLinear_0 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_0, constant_4,
       constant_5}); //  id = 11  node_arg_name =
                     //  /decoder/mid_block/attentions.0/MatMul_output_0_QuantizeLinear_Output
  builder.bind(
      "/decoder/mid_block/attentions.0/MatMul_output_0_QuantizeLinear_Output",
      com_microsoft_QuantizeLinear_0);
  auto com_microsoft_DequantizeLinear_2 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_0, constant_4,
       constant_5}); //  id = 12  node_arg_name =
                     //  /decoder/mid_block/attentions.0/MatMul_output_0_DequantizeLinear_Output
  builder.bind(
      "/decoder/mid_block/attentions.0/MatMul_output_0_DequantizeLinear_Output",
      com_microsoft_DequantizeLinear_2);
  auto constant_6 =
      builder
          .constant(); //  id = 13  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Constant_7_output_0_quantized
  builder.bind("/decoder/mid_block/attentions.0/Constant_7_output_0_quantized",
               constant_6);
  auto constant_7 =
      builder
          .constant(); //  id = 14  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Constant_7_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/Constant_7_output_0_scale",
               constant_7);
  auto constant_8 =
      builder
          .constant(); //  id = 15  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Constant_7_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/Constant_7_output_0_zero_point",
               constant_8);
  auto com_microsoft_DequantizeLinear_3 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {constant_6, constant_7,
       constant_8}); //  id = 16  node_arg_name =
                     //  /decoder/mid_block/attentions.0/Constant_7_output_0_DequantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Constant_7_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_3);
  auto Mul_0 = builder.node2(
      "Mul",
      {com_microsoft_DequantizeLinear_2,
       com_microsoft_DequantizeLinear_3}); //  id = 17  node_arg_name =
                                           //  /decoder/mid_block/attentions.0/Mul_output_0
  builder.bind("/decoder/mid_block/attentions.0/Mul_output_0", Mul_0);
  auto constant_9 =
      builder.constant(); //  id = 18  node_arg_name =
                          //  /decoder/mid_block/attentions.0/Mul_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/Mul_output_0_scale",
               constant_9);
  auto constant_10 =
      builder
          .constant(); //  id = 19  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Mul_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/Mul_output_0_zero_point",
               constant_10);
  auto com_microsoft_QuantizeLinear_1 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Mul_0, constant_9,
       constant_10}); //  id = 20  node_arg_name =
                      //  /decoder/mid_block/attentions.0/Mul_output_0_QuantizeLinear_Output
  builder.bind(
      "/decoder/mid_block/attentions.0/Mul_output_0_QuantizeLinear_Output",
      com_microsoft_QuantizeLinear_1);
  auto com_microsoft_DequantizeLinear_4 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_1, constant_9,
       constant_10}); //  id = 21  node_arg_name =
                      //  /decoder/mid_block/attentions.0/Mul_output_0_DequantizeLinear_Output
  builder.bind(
      "/decoder/mid_block/attentions.0/Mul_output_0_DequantizeLinear_Output",
      com_microsoft_DequantizeLinear_4);
  auto Softmax_0 = builder.node2(
      "Softmax",
      {com_microsoft_DequantizeLinear_4}); //  id = 22  node_arg_name =
                                           //  /decoder/mid_block/attentions.0/Softmax_output_0
  builder.bind("/decoder/mid_block/attentions.0/Softmax_output_0", Softmax_0);
  auto constant_11 =
      builder
          .constant(); //  id = 23  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Softmax_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/Softmax_output_0_scale",
               constant_11);
  auto constant_12 =
      builder
          .constant(); //  id = 24  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Softmax_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/Softmax_output_0_zero_point",
               constant_12);
  auto com_microsoft_QuantizeLinear_2 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Softmax_0, constant_11,
       constant_12}); //  id = 25  node_arg_name =
                      //  /decoder/mid_block/attentions.0/Softmax_output_0_QuantizeLinear_Output
  builder.bind(
      "/decoder/mid_block/attentions.0/Softmax_output_0_QuantizeLinear_Output",
      com_microsoft_QuantizeLinear_2);
  auto com_microsoft_DequantizeLinear_5 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_2, constant_11,
       constant_12}); //  id = 26  node_arg_name =
                      //  /decoder/mid_block/attentions.0/Softmax_output_0_DequantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Softmax_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_5);
  auto input_2 =
      builder
          .wildcard(); //  id = 27  node_arg_name =
                       //  /decoder/mid_block/attentions.0/Reshape_6_output_0_QuantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Reshape_6_output_0_QuantizeLinear_Output",
               input_2);
  auto constant_13 =
      builder
          .constant(); //  id = 28  node_arg_name =
                       //  /decoder/mid_block/attentions.0/to_v/Add_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/to_v/Add_output_0_scale",
               constant_13);
  auto constant_14 =
      builder
          .constant(); //  id = 29  node_arg_name =
                       //  /decoder/mid_block/attentions.0/to_v/Add_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/to_v/Add_output_0_zero_point",
               constant_14);
  auto com_microsoft_DequantizeLinear_6 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_2, constant_13,
       constant_14}); //  id = 30  node_arg_name =
                      //  /decoder/mid_block/attentions.0/Reshape_6_output_0_DequantizeLinear_Output
  builder.bind("/decoder/mid_block/attentions.0/"
               "Reshape_6_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_6);
  auto MatMul_1 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_5,
       com_microsoft_DequantizeLinear_6}); //  id = 31  node_arg_name =
                                           //  /decoder/mid_block/attentions.0/MatMul_1_output_0
  builder.bind("/decoder/mid_block/attentions.0/MatMul_1_output_0", MatMul_1);
  auto constant_15 =
      builder
          .constant(); //  id = 32  node_arg_name =
                       //  /decoder/mid_block/attentions.0/MatMul_1_output_0_scale
  builder.bind("/decoder/mid_block/attentions.0/MatMul_1_output_0_scale",
               constant_15);
  auto constant_16 =
      builder
          .constant(); //  id = 33  node_arg_name =
                       //  /decoder/mid_block/attentions.0/MatMul_1_output_0_zero_point
  builder.bind("/decoder/mid_block/attentions.0/MatMul_1_output_0_zero_point",
               constant_16);
  auto com_microsoft_QuantizeLinear_3 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_1, constant_15,
       constant_16}); //  id = 34  node_arg_name =
                      //  /decoder/mid_block/attentions.0/MatMul_1_output_0_QuantizeLinear_Output
  builder.bind(
      "/decoder/mid_block/attentions.0/MatMul_1_output_0_QuantizeLinear_Output",
      com_microsoft_QuantizeLinear_3);

  return Rule::create_rule(
      com_microsoft_QuantizeLinear_3,
      [=](onnxruntime::Graph* graph, binder_t& binder) -> bool {
        auto Q_dq_input_n = binder[input_1->get_id()];
        auto K_dq_trans_input_n = binder[input_0->get_id()];
        auto V_dq_input_n = binder[input_2->get_id()];
        auto mul_const_dq_n =
            binder[com_microsoft_DequantizeLinear_3->get_id()];
        auto QKV_matmul_n = binder[MatMul_1->get_id()];
        auto QKV_matmul_q_n = binder[com_microsoft_QuantizeLinear_3->get_id()];

        LOG_IF(INFO, ENV_PARAM(DEBUG_CONVERT_MHA))
            << "MHA match for rule-1 tranpose"
            << ", QKV_matmul: " << node_as_string(*QKV_matmul_n.node);

        /// create MHA node
        NodeBuilder(*graph, *self)
            .set_op_type("QMHA")
            .set_input_nodes({Q_dq_input_n.node, K_dq_trans_input_n.node,
                              V_dq_input_n.node, mul_const_dq_n.node})
            .clone_data_type(*QKV_matmul_n.node)
            .set_anchor_point1(*QKV_matmul_q_n.node)
            .build();

        return true;
      });
}

#if 0
std::unique_ptr<Rule> create_MHA_rule1(IPass* self) {

  // generated by : onnx_pattern_gen -i
  // /decoder/mid_block/attentions.0/to_q/Add_output_0_QuantizeLinear_Output -i
  // /decoder/mid_block/attentions.0/to_k/Add_output_0_QuantizeLinear_Output -i
  // /decoder/mid_block/attentions.0/to_v/Add_output_0_QuantizeLinear_Output -o
  // /decoder/mid_block/attentions.0/Reshape_8_output_0_QuantizeLinear_Output -f
  // .\onnx.onnx
  auto builder = vaip_core::PatternBuilder();

  auto input_0 =
      builder
          .wildcard(); //  id = 0
                       //  /decoder/mid_block/attentions.0/to_k/Add_output_0_QuantizeLinear_Output
  auto constant_1 =
      builder.constant(); //  id = 1 ortshared_1_0_1_200_token_3142
  auto constant_2 =
      builder
          .constant(); //  id = 2
                       //  /decoder/mid_block/attentions.0/to_k/Add_output_0_zero_point
  auto com_microsoft_DequantizeLinear_3 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_0, constant_1,
       constant_2}); //  id=3 name=
                     //  /decoder/mid_block/attentions.0/to_k/Add_output_0_DequantizeLinear_Output
  auto constant_4 = builder.constant(); //  id = 4 ortshared_7_1_4_5_token_3179
  auto Reshape_5 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_3,
       constant_4}); //  id=5 name=
                     //  /decoder/mid_block/attentions.0/Reshape_3_output_0
  auto com_microsoft_QuantizeLinear_6 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_5, constant_1,
       constant_2}); //  id=6 name=
                     //  /decoder/mid_block/attentions.0/Reshape_3_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_7 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_6, constant_1,
       constant_2}); //  id=7 name=
                     //  /decoder/mid_block/attentions.0/Reshape_3_output_0_DequantizeLinear_Output
  auto Transpose_8 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_7}); //  id=8 name=
                                           //  /decoder/mid_block/attentions.0/Transpose_2_output_0
  auto com_microsoft_QuantizeLinear_9 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_8, constant_1,
       constant_2}); //  id=9 name=
                     //  /decoder/mid_block/attentions.0/Transpose_2_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_10 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_9, constant_1,
       constant_2}); //  id=10 name=
                     //  /decoder/mid_block/attentions.0/Transpose_2_output_0_DequantizeLinear_Output
  auto constant_11 =
      builder.constant(); //  id = 11 ortshared_7_1_3_0_token_2921
  auto Reshape_12 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_10,
       constant_11}); //  id=12 name=
                      //  /decoder/mid_block/attentions.0/Reshape_4_output_0
  auto com_microsoft_QuantizeLinear_13 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_12, constant_1,
       constant_2}); //  id=13 name=
                     //  /decoder/mid_block/attentions.0/Reshape_4_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_14 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_13, constant_1,
       constant_2}); //  id=14 name=
                     //  /decoder/mid_block/attentions.0/Reshape_4_output_0_DequantizeLinear_Output
  auto Transpose_15 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_14}); //  id=15 name=
                                            //  /decoder/mid_block/attentions.0/Transpose_4_output_0
  auto com_microsoft_QuantizeLinear_16 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_15, constant_1,
       constant_2}); //  id=16 name=
                     //  /decoder/mid_block/attentions.0/Transpose_4_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_17 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_16, constant_1,
       constant_2}); //  id=17 name=
                     //  /decoder/mid_block/attentions.0/Transpose_4_output_0_DequantizeLinear_Output

  auto input_18 =
      builder
          .wildcard(); //  id = 18
                       //  /decoder/mid_block/attentions.0/to_q/Add_output_0_QuantizeLinear_Output
  auto constant_19 =
      builder.constant(); //  id = 19 ortshared_1_0_1_234_token_3185
  auto constant_20 =
      builder
          .constant(); //  id = 20
                       //  /decoder/mid_block/attentions.0/to_q/Add_output_0_zero_point
  auto com_microsoft_DequantizeLinear_21 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_18, constant_19,
       constant_20}); //  id=21 name=
                      //  /decoder/mid_block/attentions.0/to_q/Add_output_0_DequantizeLinear_Output
  auto Reshape_22 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_21,
       constant_4}); //  id=22 name=
                     //  /decoder/mid_block/attentions.0/Reshape_1_output_0
  auto com_microsoft_QuantizeLinear_23 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_22, constant_19,
       constant_20}); //  id=23 name=
                      //  /decoder/mid_block/attentions.0/Reshape_1_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_24 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_23, constant_19,
       constant_20}); //  id=24 name=
                      //  /decoder/mid_block/attentions.0/Reshape_1_output_0_DequantizeLinear_Output
  auto Transpose_25 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_24}); //  id=25 name=
                                            //  /decoder/mid_block/attentions.0/Transpose_1_output_0
  auto com_microsoft_QuantizeLinear_26 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_25, constant_19,
       constant_20}); //  id=26 name=
                      //  /decoder/mid_block/attentions.0/Transpose_1_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_27 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_26, constant_19,
       constant_20}); //  id=27 name=
                      //  /decoder/mid_block/attentions.0/Transpose_1_output_0_DequantizeLinear_Output
  auto Reshape_28 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_27,
       constant_11}); //  id=28 name=
                      //  /decoder/mid_block/attentions.0/Reshape_2_output_0
  auto com_microsoft_QuantizeLinear_29 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_28, constant_19,
       constant_20}); //  id=29 name=
                      //  /decoder/mid_block/attentions.0/Reshape_2_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_30 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_29, constant_19,
       constant_20}); //  id=30 name=
                      //  /decoder/mid_block/attentions.0/Reshape_2_output_0_DequantizeLinear_Output
  auto MatMul_31 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_30,
       com_microsoft_DequantizeLinear_17}); //  id=31 name=
                                            //  /decoder/mid_block/attentions.0/MatMul_output_0
  auto constant_32 =
      builder.constant(); //  id = 32 ortshared_1_0_1_19_token_2937
  auto constant_33 =
      builder
          .constant(); //  id = 33
                       //  /decoder/mid_block/attentions.0/MatMul_output_0_zero_point
  auto com_microsoft_QuantizeLinear_34 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_31, constant_32,
       constant_33}); //  id=34 name=
                      //  /decoder/mid_block/attentions.0/MatMul_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_35 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_34, constant_32,
       constant_33}); //  id=35 name=
                      //  /decoder/mid_block/attentions.0/MatMul_output_0_DequantizeLinear_Output
  auto constant_36 =
      builder
          .constant(); //  id = 36
                       //  /decoder/mid_block/attentions.0/Constant_7_output_0_quantized
  auto constant_37 =
      builder.constant(); //  id = 37 ortshared_1_0_1_229_token_3180
  auto constant_38 =
      builder
          .constant(); //  id = 38
                       //  /decoder/mid_block/attentions.0/Constant_7_output_0_zero_point
  auto com_microsoft_DequantizeLinear_39 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {constant_36, constant_37,
       constant_38}); //  id=39 name=
                      //  /decoder/mid_block/attentions.0/Constant_7_output_0_DequantizeLinear_Output
  auto Mul_40 = builder.node2(
      "Mul",
      {com_microsoft_DequantizeLinear_35,
       com_microsoft_DequantizeLinear_39}); //  id=40 name=
                                            //  /decoder/mid_block/attentions.0/Mul_output_0
  auto constant_41 =
      builder.constant(); //  id = 41 ortshared_1_0_1_51_token_2973
  auto constant_42 =
      builder
          .constant(); //  id = 42
                       //  /decoder/mid_block/attentions.0/Mul_output_0_zero_point
  auto com_microsoft_QuantizeLinear_43 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Mul_40, constant_41,
       constant_42}); //  id=43 name=
                      //  /decoder/mid_block/attentions.0/Mul_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_44 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_43, constant_41,
       constant_42}); //  id=44 name=
                      //  /decoder/mid_block/attentions.0/Mul_output_0_DequantizeLinear_Output
  auto Softmax_45 = builder.node2(
      "Softmax",
      {com_microsoft_DequantizeLinear_44}); //  id=45 name=
                                            //  /decoder/mid_block/attentions.0/Softmax_output_0
  auto constant_46 =
      builder.constant(); //  id = 46 ortshared_1_0_1_69_token_2994
  auto constant_47 =
      builder
          .constant(); //  id = 47
                       //  /decoder/mid_block/attentions.0/Softmax_output_0_zero_point
  auto com_microsoft_QuantizeLinear_48 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Softmax_45, constant_46,
       constant_47}); //  id=48 name=
                      //  /decoder/mid_block/attentions.0/Softmax_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_49 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_48, constant_46,
       constant_47}); //  id=49 name=
                      //  /decoder/mid_block/attentions.0/Softmax_output_0_DequantizeLinear_Output

  auto input_50 =
      builder
          .wildcard(); //  id = 50
                       //  /decoder/mid_block/attentions.0/to_v/Add_output_0_QuantizeLinear_Output
  auto constant_51 =
      builder.constant(); //  id = 51 ortshared_1_0_1_59_token_2983
  auto constant_52 =
      builder
          .constant(); //  id = 52
                       //  /decoder/mid_block/attentions.0/to_v/Add_output_0_zero_point
  auto com_microsoft_DequantizeLinear_53 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_50, constant_51,
       constant_52}); //  id=53 name=
                      //  /decoder/mid_block/attentions.0/to_v/Add_output_0_DequantizeLinear_Output
  auto Reshape_54 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_53,
       constant_4}); //  id=54 name=
                     //  /decoder/mid_block/attentions.0/Reshape_5_output_0
  auto com_microsoft_QuantizeLinear_55 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_54, constant_51,
       constant_52}); //  id=55 name=
                      //  /decoder/mid_block/attentions.0/Reshape_5_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_56 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_55, constant_51,
       constant_52}); //  id=56 name=
                      //  /decoder/mid_block/attentions.0/Reshape_5_output_0_DequantizeLinear_Output
  auto Transpose_57 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_56}); //  id=57 name=
                                            //  /decoder/mid_block/attentions.0/Transpose_3_output_0
  auto com_microsoft_QuantizeLinear_58 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_57, constant_51,
       constant_52}); //  id=58 name=
                      //  /decoder/mid_block/attentions.0/Transpose_3_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_59 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_58, constant_51,
       constant_52}); //  id=59 name=
                      //  /decoder/mid_block/attentions.0/Transpose_3_output_0_DequantizeLinear_Output
  auto Reshape_60 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_59,
       constant_11}); //  id=60 name=
                      //  /decoder/mid_block/attentions.0/Reshape_6_output_0
  auto com_microsoft_QuantizeLinear_61 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_60, constant_51,
       constant_52}); //  id=61 name=
                      //  /decoder/mid_block/attentions.0/Reshape_6_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_62 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_61, constant_51,
       constant_52}); //  id=62 name=
                      //  /decoder/mid_block/attentions.0/Reshape_6_output_0_DequantizeLinear_Output
  auto MatMul_63 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_49,
       com_microsoft_DequantizeLinear_62}); //  id=63 name=
                                            //  /decoder/mid_block/attentions.0/MatMul_1_output_0
  auto constant_64 =
      builder.constant(); //  id = 64 ortshared_1_0_1_270_token_3226
  auto constant_65 =
      builder
          .constant(); //  id = 65
                       //  /decoder/mid_block/attentions.0/MatMul_1_output_0_zero_point
  auto com_microsoft_QuantizeLinear_66 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_63, constant_64,
       constant_65}); //  id=66 name=
                      //  /decoder/mid_block/attentions.0/MatMul_1_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_67 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_66, constant_64,
       constant_65}); //  id=67 name=
                      //  /decoder/mid_block/attentions.0/MatMul_1_output_0_DequantizeLinear_Output
  auto constant_68 =
      builder.constant(); //  id = 68 ortshared_7_1_4_0_token_2925
  auto Reshape_69 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_67,
       constant_68}); //  id=69 name=
                      //  /decoder/mid_block/attentions.0/Reshape_7_output_0
  auto com_microsoft_QuantizeLinear_70 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_69, constant_64,
       constant_65}); //  id=70 name=
                      //  /decoder/mid_block/attentions.0/Reshape_7_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_71 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_70, constant_64,
       constant_65}); //  id=71 name=
                      //  /decoder/mid_block/attentions.0/Reshape_7_output_0_DequantizeLinear_Output
  auto Transpose_72 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_71}); //  id=72 name=
                                            //  /decoder/mid_block/attentions.0/Transpose_5_output_0
  auto com_microsoft_QuantizeLinear_73 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_72, constant_64,
       constant_65}); //  id=73 name=
                      //  /decoder/mid_block/attentions.0/Transpose_5_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_74 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_73, constant_64,
       constant_65}); //  id=74 name=
                      //  /decoder/mid_block/attentions.0/Transpose_5_output_0_DequantizeLinear_Output
  auto Reshape_75 = builder.node2(
      "Reshape",
      {com_microsoft_DequantizeLinear_74,
       constant_11}); //  id=75 name=
                      //  /decoder/mid_block/attentions.0/Reshape_8_output_0
  auto com_microsoft_QuantizeLinear_76 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_75, constant_64,
       constant_65}); //  id=76 name=
                      //  /decoder/mid_block/attentions.0/Reshape_8_output_0_QuantizeLinear_Output

  return Rule::create_rule(
      com_microsoft_QuantizeLinear_76,
      [=](onnxruntime::Graph* graph, binder_t& binder) -> bool {
        auto Q_dq_input_n = binder[input_18->get_id()];
        auto K_dq_input_n = binder[input_0->get_id()];
        auto V_dq_input_n = binder[input_50->get_id()];
        auto mul_const_dq_n =
            binder[com_microsoft_DequantizeLinear_39->get_id()];
        auto QKV_matmul_n = binder[MatMul_63->get_id()];
        auto QKV_matmul_q_n = binder[com_microsoft_QuantizeLinear_76->get_id()];

        LOG_IF(INFO, ENV_PARAM(DEBUG_CONVERT_MHA))
            << "MHA match for rule-1"
            << ", QKV_matmul: " << node_as_string(*QKV_matmul_n.node);

        /// create MHA node
        NodeBuilder(*graph, *self)
            .set_op_type("QMHA")
            .set_input_nodes({Q_dq_input_n.node, K_dq_input_n.node,
                              V_dq_input_n.node, mul_const_dq_n.node})
            .clone_data_type(*QKV_matmul_n.node)
            .set_anchor_point1(*QKV_matmul_q_n.node)
            .build();

        return true;
      });
}

std::unique_ptr<Rule> create_MHA_rule2(IPass* self) {

  // generated by : onnx_pattern_gen -i /to_q/Add_output_0_QuantizeLinear_Output
  // -i /to_k/Add_output_0_QuantizeLinear_Output -i
  // /to_v/Add_output_0_QuantizeLinear_Output -o
  // /Reshape_8_output_0_QuantizeLinear_Output -f .\onnx.onnx
  auto builder = vaip_core::PatternBuilder();
  auto input_0 =
      builder.wildcard(); //  id = 0 /to_k/Add_output_0_QuantizeLinear_Output
  auto constant_1 = builder.constant(); //  id = 1 ortshared_1_0_1_76_token_2502
  auto constant_2 = builder.constant(); //  id = 2 /to_k/Add_output_0_zero_point
  auto com_microsoft_DequantizeLinear_3 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_0, constant_1,
       constant_2}); //  id=3 name= /to_k/Add_output_0_DequantizeLinear_Output
  auto constant_4 = builder.constant(); //  id = 4 ortshared_7_1_4_1_token_2448
  auto Reshape_5 =
      builder.node2("Reshape", {com_microsoft_DequantizeLinear_3,
                                constant_4}); //  id=5 name= /Reshape_3_output_0
  auto com_microsoft_QuantizeLinear_6 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_5, constant_1,
       constant_2}); //  id=6 name= /Reshape_3_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_7 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_6, constant_1,
       constant_2}); //  id=7 name= /Reshape_3_output_0_DequantizeLinear_Output
  auto Transpose_8 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_7}); //  id=8 name= /Transpose_3_output_0
  auto com_microsoft_QuantizeLinear_9 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_8, constant_1,
       constant_2}); //  id=9 name= /Transpose_3_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_10 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_9, constant_1,
       constant_2});      //  id=10 name=
                          //  /Transpose_3_output_0_DequantizeLinear_Output
  auto constant_11 =
      builder.constant(); //  id = 11 ortshared_7_1_3_1_token_2514
  auto Reshape_12 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_10,
                  constant_11}); //  id=12 name= /Reshape_4_output_0
  auto com_microsoft_QuantizeLinear_13 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_12, constant_1,
       constant_2}); //  id=13 name= /Reshape_4_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_14 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_13, constant_1,
       constant_2}); //  id=14 name= /Reshape_4_output_0_DequantizeLinear_Output
  auto Transpose_15 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_14}); //  id=15 name=
                                            //  /Transpose_5_output_0
  auto com_microsoft_QuantizeLinear_16 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_15, constant_1,
       constant_2}); //  id=16 name= /Transpose_5_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_17 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_16, constant_1,
       constant_2}); //  id=17 name=
                     //  /Transpose_5_output_0_DequantizeLinear_Output

  auto input_18 =
      builder.wildcard(); //  id = 18 /to_q/Add_output_0_QuantizeLinear_Output
  auto constant_19 =
      builder.constant(); //  id = 19 ortshared_1_0_1_224_token_2690
  auto constant_20 =
      builder.constant(); //  id = 20 /to_q/Add_output_0_zero_point
  auto com_microsoft_DequantizeLinear_21 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_18, constant_19,
       constant_20}); //  id=21 name= /to_q/Add_output_0_DequantizeLinear_Output
  auto Reshape_22 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_21,
                  constant_4}); //  id=22 name= /Reshape_1_output_0
  auto com_microsoft_QuantizeLinear_23 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_22, constant_19,
       constant_20}); //  id=23 name= /Reshape_1_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_24 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_23, constant_19,
       constant_20}); //  id=24 name=
                      //  /Reshape_1_output_0_DequantizeLinear_Output
  auto Transpose_25 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_24}); //  id=25 name=
                                            //  /Transpose_2_output_0
  auto com_microsoft_QuantizeLinear_26 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_25, constant_19,
       constant_20}); //  id=26 name=
                      //  /Transpose_2_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_27 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_26, constant_19,
       constant_20}); //  id=27 name=
                      //  /Transpose_2_output_0_DequantizeLinear_Output
  auto Reshape_28 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_27,
                  constant_11}); //  id=28 name= /Reshape_2_output_0
  auto com_microsoft_QuantizeLinear_29 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_28, constant_19,
       constant_20}); //  id=29 name= /Reshape_2_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_30 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_29, constant_19,
       constant_20}); //  id=30 name=
                      //  /Reshape_2_output_0_DequantizeLinear_Output
  auto MatMul_31 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_30,
       com_microsoft_DequantizeLinear_17}); //  id=31 name=
                                            //  /module_bmm/MatMul_output_0
  auto constant_32 =
      builder.constant(); //  id = 32 ortshared_1_0_1_5_token_2406
  auto constant_33 =
      builder.constant(); //  id = 33 /module_bmm/MatMul_output_0_zero_point
  auto com_microsoft_QuantizeLinear_34 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_31, constant_32,
       constant_33}); //  id=34 name=
                      //  /module_bmm/MatMul_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_35 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_34, constant_32,
       constant_33}); //  id=35 name=
                      //  /module_bmm/MatMul_output_0_DequantizeLinear_Output
  auto constant_36 =
      builder
          .constant(); //  id = 36
                       //  /module_mul_22/Constant_output_0_QuantizeLinear_Output
  auto constant_37 =
      builder.constant(); //  id = 37 ortshared_1_0_1_136_token_2578
  auto constant_38 =
      builder
          .constant(); //  id = 38 /module_mul_22/Constant_output_0_zero_point
  auto com_microsoft_DequantizeLinear_39 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {constant_36, constant_37,
       constant_38}); //  id=39 name=
                      //  /module_mul_22/Constant_output_0_DequantizeLinear_Output
  auto Mul_40 = builder.node2(
      "Mul",
      {com_microsoft_DequantizeLinear_39,
       com_microsoft_DequantizeLinear_35}); //  id=40 name=
                                            //  /module_mul_22/Mul_output_0
  auto constant_41 =
      builder.constant(); //  id = 41 ortshared_1_0_1_228_token_2694
  auto constant_42 =
      builder
          .constant(); //  id = 42
                       //  DoubleQDQRemoved_/module_mul_22/Mul_output_0_zero_point
  auto com_microsoft_QuantizeLinear_43 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Mul_40, constant_41,
       constant_42});     //  id=43 name=
                          //  /module_mul_22/Mul_output_0_QuantizeLinear_Output
  auto constant_44 =
      builder.constant(); //  id = 44 DoubleQDQRemoved_/Cast_output_0_zero_point
  auto com_microsoft_DequantizeLinear_45 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_43, constant_41,
       constant_44}); //  id=45 name= /Cast_output_0_DequantizeLinear_Output
  auto Softmax_46 = builder.node2(
      "Softmax",
      {com_microsoft_DequantizeLinear_45}); //  id=46 name=
                                            //  /module_softmax/Softmax_output_0
  auto constant_47 =
      builder.constant(); //  id = 47 ortshared_1_0_1_26_token_2436
  auto constant_48 =
      builder
          .constant(); //  id = 48
                       //  DoubleQDQRemoved_/module_softmax/Softmax_output_0_zero_point
  auto com_microsoft_QuantizeLinear_49 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Softmax_46, constant_47,
       constant_48}); //  id=49 name=
                      //  /module_softmax/Softmax_output_0_QuantizeLinear_Output
  auto constant_50 =
      builder
          .constant(); //  id = 50 DoubleQDQRemoved_/Cast_1_output_0_zero_point
  auto com_microsoft_DequantizeLinear_51 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_49, constant_47,
       constant_50}); //  id=51 name= /Cast_1_output_0_DequantizeLinear_Output

  auto input_52 =
      builder.wildcard(); //  id = 52 /to_v/Add_output_0_QuantizeLinear_Output
  auto constant_53 =
      builder.constant(); //  id = 53 ortshared_1_0_1_30_token_2440
  auto constant_54 =
      builder.constant(); //  id = 54 /to_v/Add_output_0_zero_point
  auto com_microsoft_DequantizeLinear_55 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_52, constant_53,
       constant_54}); //  id=55 name= /to_v/Add_output_0_DequantizeLinear_Output
  auto Reshape_56 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_55,
                  constant_4}); //  id=56 name= /Reshape_5_output_0
  auto com_microsoft_QuantizeLinear_57 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_56, constant_53,
       constant_54}); //  id=57 name= /Reshape_5_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_58 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_57, constant_53,
       constant_54}); //  id=58 name=
                      //  /Reshape_5_output_0_DequantizeLinear_Output
  auto Transpose_59 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_58}); //  id=59 name=
                                            //  /Transpose_4_output_0
  auto com_microsoft_QuantizeLinear_60 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_59, constant_53,
       constant_54}); //  id=60 name=
                      //  /Transpose_4_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_61 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_60, constant_53,
       constant_54}); //  id=61 name=
                      //  /Transpose_4_output_0_DequantizeLinear_Output
  auto Reshape_62 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_61,
                  constant_11}); //  id=62 name= /Reshape_6_output_0
  auto com_microsoft_QuantizeLinear_63 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_62, constant_53,
       constant_54}); //  id=63 name= /Reshape_6_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_64 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_63, constant_53,
       constant_54}); //  id=64 name=
                      //  /Reshape_6_output_0_DequantizeLinear_Output
  auto MatMul_65 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_51,
       com_microsoft_DequantizeLinear_64}); //  id=65 name=
                                            //  /module_bmm_1/MatMul_output_0
  auto constant_66 =
      builder.constant(); //  id = 66 ortshared_1_0_1_180_token_2639
  auto constant_67 =
      builder.constant(); //  id = 67 /module_bmm_1/MatMul_output_0_zero_point
  auto com_microsoft_QuantizeLinear_68 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_65, constant_66,
       constant_67}); //  id=68 name=
                      //  /module_bmm_1/MatMul_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_69 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_68, constant_66,
       constant_67}); //  id=69 name=
                      //  /module_bmm_1/MatMul_output_0_DequantizeLinear_Output
  auto constant_70 =
      builder.constant(); //  id = 70 ortshared_7_1_4_4_token_2508
  auto Reshape_71 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_69,
                  constant_70}); //  id=71 name= /Reshape_7_output_0
  auto com_microsoft_QuantizeLinear_72 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_71, constant_66,
       constant_67}); //  id=72 name= /Reshape_7_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_73 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_72, constant_66,
       constant_67}); //  id=73 name=
                      //  /Reshape_7_output_0_DequantizeLinear_Output
  auto Transpose_74 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_73}); //  id=74 name=
                                            //  /Transpose_6_output_0
  auto com_microsoft_QuantizeLinear_75 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_74, constant_66,
       constant_67}); //  id=75 name=
                      //  /Transpose_6_output_0_QuantizeLinear_Output
  auto com_microsoft_DequantizeLinear_76 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_75, constant_66,
       constant_67}); //  id=76 name=
                      //  /Transpose_6_output_0_DequantizeLinear_Output
  auto Reshape_77 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_76,
                  constant_11}); //  id=77 name= /Reshape_8_output_0
  auto com_microsoft_QuantizeLinear_78 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_77, constant_66,
       constant_67}); //  id=78 name= /Reshape_8_output_0_QuantizeLinear_Output

  return Rule::create_rule(
      com_microsoft_QuantizeLinear_78,
      [=](onnxruntime::Graph* graph, binder_t& binder) -> bool {
        auto Q_dq_input_n = binder[input_18->get_id()];
        auto K_dq_input_n = binder[input_0->get_id()];
        auto V_dq_input_n = binder[input_52->get_id()];
        auto mul_const_dq_n =
            binder[com_microsoft_DequantizeLinear_39->get_id()];
        auto QKV_matmul_n = binder[MatMul_65->get_id()];
        auto QKV_matmul_q_n = binder[com_microsoft_QuantizeLinear_78->get_id()];

        LOG_IF(INFO, ENV_PARAM(DEBUG_CONVERT_MHA))
            << "MHA match for rule-2"
            << ", QKV_matmul: " << node_as_string(*QKV_matmul_n.node);

        /// create MHA node
        NodeBuilder(*graph, *self)
            .set_op_type("QMHA")
            .set_input_nodes({Q_dq_input_n.node, K_dq_input_n.node,
                              V_dq_input_n.node, mul_const_dq_n.node})
            .clone_data_type(*QKV_matmul_n.node)
            .set_anchor_point1(*QKV_matmul_q_n.node)
            .build();

        return true;
      });
}

std::unique_ptr<Rule> create_MHA_rule3(IPass* self) {

  // generated by : onnx_pattern_gen -i /to_q/Add_output_0_QuantizeLinear_Output
  // -i /to_k/Add_output_0_QuantizeLinear_Output -i
  // /to_v/Add_output_0_QuantizeLinear_Output -o
  // /Reshape_8_output_0_QuantizeLinear_Output -f .\onnx.onnx
  auto builder = vaip_core::PatternBuilder();
  auto input_0 =
      builder.wildcard(); //  id = 0 /to_k/Add_output_0_QuantizeLinear_Output
  builder.bind("/to_k/Add_output_0_QuantizeLinear_Output", input_0);
  auto constant_1 = builder.constant(); //  id = 1 /to_k/Add_output_0_scale
  builder.bind("/to_k/Add_output_0_scale", constant_1);
  auto constant_2 = builder.constant(); //  id = 2 /to_k/Add_output_0_zero_point
  builder.bind("/to_k/Add_output_0_zero_point", constant_2);
  auto com_microsoft_DequantizeLinear_3 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_0, constant_1,
       constant_2}); //  id=3 name= /to_k/Add_output_0_DequantizeLinear_Output
  builder.bind("/to_k/Add_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_3);
  auto constant_4 = builder.constant(); //  id = 4 /Concat_3_output_0
  builder.bind("/Concat_3_output_0", constant_4);
  auto Reshape_5 =
      builder.node2("Reshape", {com_microsoft_DequantizeLinear_3,
                                constant_4}); //  id=5 name= /Reshape_3_output_0
  builder.bind("/Reshape_3_output_0", Reshape_5);
  auto com_microsoft_QuantizeLinear_6 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_5, constant_1,
       constant_2}); //  id=6 name= /Reshape_3_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_3_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_6);
  auto com_microsoft_DequantizeLinear_7 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_6, constant_1,
       constant_2}); //  id=7 name= /Reshape_3_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_3_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_7);
  auto Transpose_8 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_7}); //  id=8 name= /Transpose_3_output_0
  builder.bind("/Transpose_3_output_0", Transpose_8);
  auto com_microsoft_QuantizeLinear_9 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_8, constant_1,
       constant_2}); //  id=9 name= /Transpose_3_output_0_QuantizeLinear_Output
  builder.bind("/Transpose_3_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_9);
  auto com_microsoft_DequantizeLinear_10 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_9, constant_1,
       constant_2}); //  id=10 name=
                     //  /Transpose_3_output_0_DequantizeLinear_Output
  builder.bind("/Transpose_3_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_10);
  auto constant_11 = builder.constant(); //  id = 11 /Concat_4_output_0
  builder.bind("/Concat_4_output_0", constant_11);
  auto Reshape_12 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_10,
                  constant_11}); //  id=12 name= /Reshape_4_output_0
  builder.bind("/Reshape_4_output_0", Reshape_12);
  auto com_microsoft_QuantizeLinear_13 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_12, constant_1,
       constant_2}); //  id=13 name= /Reshape_4_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_4_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_13);
  auto com_microsoft_DequantizeLinear_14 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_13, constant_1,
       constant_2}); //  id=14 name= /Reshape_4_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_4_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_14);
  auto Transpose_15 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_14}); //  id=15 name=
                                            //  /Transpose_5_output_0
  builder.bind("/Transpose_5_output_0", Transpose_15);
  auto com_microsoft_QuantizeLinear_16 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_15, constant_1,
       constant_2}); //  id=16 name= /Transpose_5_output_0_QuantizeLinear_Output
  builder.bind("/Transpose_5_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_16);
  auto com_microsoft_DequantizeLinear_17 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_16, constant_1,
       constant_2}); //  id=17 name=
                     //  /Transpose_5_output_0_DequantizeLinear_Output
  builder.bind("/Transpose_5_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_17);
  auto input_18 =
      builder.wildcard(); //  id = 18 /to_q/Add_output_0_QuantizeLinear_Output
  builder.bind("/to_q/Add_output_0_QuantizeLinear_Output", input_18);
  auto constant_19 = builder.constant(); //  id = 19 /to_q/Add_output_0_scale
  builder.bind("/to_q/Add_output_0_scale", constant_19);
  auto constant_20 =
      builder.constant(); //  id = 20 /to_q/Add_output_0_zero_point
  builder.bind("/to_q/Add_output_0_zero_point", constant_20);
  auto com_microsoft_DequantizeLinear_21 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_18, constant_19,
       constant_20}); //  id=21 name= /to_q/Add_output_0_DequantizeLinear_Output
  builder.bind("/to_q/Add_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_21);
  auto Reshape_22 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_21,
                  constant_4}); //  id=22 name= /Reshape_1_output_0
  builder.bind("/Reshape_1_output_0", Reshape_22);
  auto com_microsoft_QuantizeLinear_23 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_22, constant_19,
       constant_20}); //  id=23 name= /Reshape_1_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_1_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_23);
  auto com_microsoft_DequantizeLinear_24 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_23, constant_19,
       constant_20}); //  id=24 name=
                      //  /Reshape_1_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_1_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_24);
  auto Transpose_25 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_24}); //  id=25 name=
                                            //  /Transpose_2_output_0
  builder.bind("/Transpose_2_output_0", Transpose_25);
  auto com_microsoft_QuantizeLinear_26 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_25, constant_19,
       constant_20}); //  id=26 name=
                      //  /Transpose_2_output_0_QuantizeLinear_Output
  builder.bind("/Transpose_2_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_26);
  auto com_microsoft_DequantizeLinear_27 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_26, constant_19,
       constant_20}); //  id=27 name=
                      //  /Transpose_2_output_0_DequantizeLinear_Output
  builder.bind("/Transpose_2_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_27);
  auto Reshape_28 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_27,
                  constant_11}); //  id=28 name= /Reshape_2_output_0
  builder.bind("/Reshape_2_output_0", Reshape_28);
  auto com_microsoft_QuantizeLinear_29 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_28, constant_19,
       constant_20}); //  id=29 name= /Reshape_2_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_2_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_29);
  auto com_microsoft_DequantizeLinear_30 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_29, constant_19,
       constant_20}); //  id=30 name=
                      //  /Reshape_2_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_2_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_30);
  auto MatMul_31 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_30,
       com_microsoft_DequantizeLinear_17}); //  id=31 name=
                                            //  /module_bmm/MatMul_output_0
  builder.bind("/module_bmm/MatMul_output_0", MatMul_31);
  auto constant_32 =
      builder.constant(); //  id = 32 /module_bmm/MatMul_output_0_scale
  builder.bind("/module_bmm/MatMul_output_0_scale", constant_32);
  auto constant_33 =
      builder.constant(); //  id = 33 /module_bmm/MatMul_output_0_zero_point
  builder.bind("/module_bmm/MatMul_output_0_zero_point", constant_33);
  auto com_microsoft_QuantizeLinear_34 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_31, constant_32,
       constant_33}); //  id=34 name=
                      //  /module_bmm/MatMul_output_0_QuantizeLinear_Output
  builder.bind("/module_bmm/MatMul_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_34);
  auto com_microsoft_DequantizeLinear_35 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_34, constant_32,
       constant_33}); //  id=35 name=
                      //  /module_bmm/MatMul_output_0_DequantizeLinear_Output
  builder.bind("/module_bmm/MatMul_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_35);
  auto constant_36 =
      builder
          .constant(); //  id = 36
                       //  /module_mul_22/Constant_output_0_QuantizeLinear_Output
  builder.bind("/module_mul_22/Constant_output_0_QuantizeLinear_Output",
               constant_36);
  auto constant_37 =
      builder.constant(); //  id = 37 /module_mul_22/Constant_output_0_scale
  builder.bind("/module_mul_22/Constant_output_0_scale", constant_37);
  auto constant_38 =
      builder
          .constant(); //  id = 38 /module_mul_22/Constant_output_0_zero_point
  builder.bind("/module_mul_22/Constant_output_0_zero_point", constant_38);
  auto com_microsoft_DequantizeLinear_39 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {constant_36, constant_37,
       constant_38}); //  id=39 name=
                      //  /module_mul_22/Constant_output_0_DequantizeLinear_Output
  builder.bind("/module_mul_22/Constant_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_39);
  auto Mul_40 = builder.node2(
      "Mul",
      {com_microsoft_DequantizeLinear_39,
       com_microsoft_DequantizeLinear_35}); //  id=40 name=
                                            //  /module_mul_22/Mul_output_0
  builder.bind("/module_mul_22/Mul_output_0", Mul_40);
  auto constant_41 =
      builder.constant(); //  id = 41
                          //  DoubleQDQRemoved_/module_mul_22/Mul_output_0_scale
  builder.bind("DoubleQDQRemoved_/module_mul_22/Mul_output_0_scale",
               constant_41);
  auto constant_42 =
      builder
          .constant(); //  id = 42
                       //  DoubleQDQRemoved_/module_mul_22/Mul_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/module_mul_22/Mul_output_0_zero_point",
               constant_42);
  auto com_microsoft_QuantizeLinear_43 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Mul_40, constant_41,
       constant_42}); //  id=43 name=
                      //  /module_mul_22/Mul_output_0_QuantizeLinear_Output
  builder.bind("/module_mul_22/Mul_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_43);
  auto constant_44 =
      builder.constant(); //  id = 44 DoubleQDQRemoved_/Cast_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/Cast_output_0_zero_point", constant_44);
  auto com_microsoft_DequantizeLinear_45 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_43, constant_41,
       constant_44}); //  id=45 name= /Cast_output_0_DequantizeLinear_Output
  builder.bind("/Cast_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_45);
  auto Softmax_46 = builder.node2(
      "Softmax",
      {com_microsoft_DequantizeLinear_45}); //  id=46 name=
                                            //  /module_softmax/Softmax_output_0
  builder.bind("/module_softmax/Softmax_output_0", Softmax_46);
  auto constant_47 =
      builder.constant(); //  id = 47 DoubleQDQRemoved_/Cast_1_output_0_scale
  builder.bind("DoubleQDQRemoved_/Cast_1_output_0_scale", constant_47);
  auto constant_48 =
      builder
          .constant(); //  id = 48
                       //  DoubleQDQRemoved_/module_softmax/Softmax_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/module_softmax/Softmax_output_0_zero_point",
               constant_48);
  auto com_microsoft_QuantizeLinear_49 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Softmax_46, constant_47,
       constant_48}); //  id=49 name=
                      //  /module_softmax/Softmax_output_0_QuantizeLinear_Output
  builder.bind("/module_softmax/Softmax_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_49);
  auto constant_50 =
      builder
          .constant(); //  id = 50 DoubleQDQRemoved_/Cast_1_output_0_zero_point
  builder.bind("DoubleQDQRemoved_/Cast_1_output_0_zero_point", constant_50);
  auto com_microsoft_DequantizeLinear_51 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_49, constant_47,
       constant_50}); //  id=51 name= /Cast_1_output_0_DequantizeLinear_Output
  builder.bind("/Cast_1_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_51);
  auto input_52 =
      builder.wildcard(); //  id = 52 /to_v/Add_output_0_QuantizeLinear_Output
  builder.bind("/to_v/Add_output_0_QuantizeLinear_Output", input_52);
  auto constant_53 = builder.constant(); //  id = 53 /to_v/Add_output_0_scale
  builder.bind("/to_v/Add_output_0_scale", constant_53);
  auto constant_54 =
      builder.constant(); //  id = 54 /to_v/Add_output_0_zero_point
  builder.bind("/to_v/Add_output_0_zero_point", constant_54);
  auto com_microsoft_DequantizeLinear_55 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {input_52, constant_53,
       constant_54}); //  id=55 name= /to_v/Add_output_0_DequantizeLinear_Output
  builder.bind("/to_v/Add_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_55);
  auto Reshape_56 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_55,
                  constant_4}); //  id=56 name= /Reshape_5_output_0
  builder.bind("/Reshape_5_output_0", Reshape_56);
  auto com_microsoft_QuantizeLinear_57 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_56, constant_53,
       constant_54}); //  id=57 name= /Reshape_5_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_5_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_57);
  auto com_microsoft_DequantizeLinear_58 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_57, constant_53,
       constant_54}); //  id=58 name=
                      //  /Reshape_5_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_5_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_58);
  auto Transpose_59 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_58}); //  id=59 name=
                                            //  /Transpose_4_output_0
  builder.bind("/Transpose_4_output_0", Transpose_59);
  auto com_microsoft_QuantizeLinear_60 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_59, constant_53,
       constant_54}); //  id=60 name=
                      //  /Transpose_4_output_0_QuantizeLinear_Output
  builder.bind("/Transpose_4_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_60);
  auto com_microsoft_DequantizeLinear_61 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_60, constant_53,
       constant_54}); //  id=61 name=
                      //  /Transpose_4_output_0_DequantizeLinear_Output
  builder.bind("/Transpose_4_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_61);
  auto constant_62 = builder.constant(); //  id = 62 /Concat_6_output_0
  builder.bind("/Concat_6_output_0", constant_62);
  auto Reshape_63 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_61,
                  constant_62}); //  id=63 name= /Reshape_6_output_0
  builder.bind("/Reshape_6_output_0", Reshape_63);
  auto com_microsoft_QuantizeLinear_64 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_63, constant_53,
       constant_54}); //  id=64 name= /Reshape_6_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_6_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_64);
  auto com_microsoft_DequantizeLinear_65 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_64, constant_53,
       constant_54}); //  id=65 name=
                      //  /Reshape_6_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_6_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_65);
  auto MatMul_66 = builder.node2(
      "MatMul",
      {com_microsoft_DequantizeLinear_51,
       com_microsoft_DequantizeLinear_65}); //  id=66 name=
                                            //  /module_bmm_1/MatMul_output_0
  builder.bind("/module_bmm_1/MatMul_output_0", MatMul_66);
  auto constant_67 =
      builder.constant(); //  id = 67 /module_bmm_1/MatMul_output_0_scale
  builder.bind("/module_bmm_1/MatMul_output_0_scale", constant_67);
  auto constant_68 =
      builder.constant(); //  id = 68 /module_bmm_1/MatMul_output_0_zero_point
  builder.bind("/module_bmm_1/MatMul_output_0_zero_point", constant_68);
  auto com_microsoft_QuantizeLinear_69 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {MatMul_66, constant_67,
       constant_68}); //  id=69 name=
                      //  /module_bmm_1/MatMul_output_0_QuantizeLinear_Output
  builder.bind("/module_bmm_1/MatMul_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_69);
  auto com_microsoft_DequantizeLinear_70 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_69, constant_67,
       constant_68}); //  id=70 name=
                      //  /module_bmm_1/MatMul_output_0_DequantizeLinear_Output
  builder.bind("/module_bmm_1/MatMul_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_70);
  auto constant_71 = builder.constant(); //  id = 71 /Concat_7_output_0
  builder.bind("/Concat_7_output_0", constant_71);
  auto Reshape_72 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_70,
                  constant_71}); //  id=72 name= /Reshape_7_output_0
  builder.bind("/Reshape_7_output_0", Reshape_72);
  auto com_microsoft_QuantizeLinear_73 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_72, constant_67,
       constant_68}); //  id=73 name= /Reshape_7_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_7_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_73);
  auto com_microsoft_DequantizeLinear_74 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_73, constant_67,
       constant_68}); //  id=74 name=
                      //  /Reshape_7_output_0_DequantizeLinear_Output
  builder.bind("/Reshape_7_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_74);
  auto Transpose_75 = builder.node2(
      "Transpose",
      {com_microsoft_DequantizeLinear_74}); //  id=75 name=
                                            //  /Transpose_6_output_0
  builder.bind("/Transpose_6_output_0", Transpose_75);
  auto com_microsoft_QuantizeLinear_76 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Transpose_75, constant_67,
       constant_68}); //  id=76 name=
                      //  /Transpose_6_output_0_QuantizeLinear_Output
  builder.bind("/Transpose_6_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_76);
  auto com_microsoft_DequantizeLinear_77 = builder.node2(
      "com.microsoft:DequantizeLinear",
      {com_microsoft_QuantizeLinear_76, constant_67,
       constant_68}); //  id=77 name=
                      //  /Transpose_6_output_0_DequantizeLinear_Output
  builder.bind("/Transpose_6_output_0_DequantizeLinear_Output",
               com_microsoft_DequantizeLinear_77);
  auto constant_78 = builder.constant(); //  id = 78 /Concat_8_output_0
  builder.bind("/Concat_8_output_0", constant_78);
  auto Reshape_79 = builder.node2(
      "Reshape", {com_microsoft_DequantizeLinear_77,
                  constant_78}); //  id=79 name= /Reshape_8_output_0
  builder.bind("/Reshape_8_output_0", Reshape_79);
  auto com_microsoft_QuantizeLinear_80 = builder.node2(
      "com.microsoft:QuantizeLinear",
      {Reshape_79, constant_67,
       constant_68}); //  id=80 name= /Reshape_8_output_0_QuantizeLinear_Output
  builder.bind("/Reshape_8_output_0_QuantizeLinear_Output",
               com_microsoft_QuantizeLinear_80);

  return Rule::create_rule(
      com_microsoft_QuantizeLinear_80,
      [=](onnxruntime::Graph* graph, binder_t& binder) -> bool {
        auto Q_dq_input_n = binder[input_18->get_id()];
        auto K_dq_input_n = binder[input_0->get_id()];
        auto V_dq_input_n = binder[input_52->get_id()];
        auto mul_const_dq_n =
            binder[com_microsoft_DequantizeLinear_39->get_id()];
        auto QKV_matmul_n = binder[MatMul_66->get_id()];
        auto QKV_matmul_q_n = binder[com_microsoft_QuantizeLinear_80->get_id()];

        LOG_IF(INFO, ENV_PARAM(DEBUG_CONVERT_MHA))
            << "MHA match for rule-3"
            << ", QKV_matmul: " << node_as_string(*QKV_matmul_n.node);

        /// create MHA node
        NodeBuilder(*graph, *self)
            .set_op_type("QMHA")
            .set_input_nodes({Q_dq_input_n.node, K_dq_input_n.node,
                              V_dq_input_n.node, mul_const_dq_n.node})
            .clone_data_type(*QKV_matmul_n.node)
            .set_anchor_point1(*QKV_matmul_q_n.node)
            .build();

        return true;
      });
}
#endif

struct ConvertSubgraphToMHA {
  ConvertSubgraphToMHA(IPass& self) {}

  void process(IPass& self, Graph& graph) {
    std::unique_ptr<BaseRule> rules[] = {create_MHA_tranpose_rule0(&self),
                                         create_MHA_tranpose_rule1(&self)};

    auto chain =
        BaseRule::create_rule_chain(std::vector<std::unique_ptr<BaseRule>>{
            std::make_move_iterator(std::begin(rules)),
            std::make_move_iterator(std::end(rules))});
    chain->apply(&graph);
  }
};

} // namespace

DEFINE_VAIP_PASS(ConvertSubgraphToMHA, vaip_pass_convert_MHA)
